[
  {
    "objectID": "modeling_example.html",
    "href": "modeling_example.html",
    "title": "Iterate Upon a Model",
    "section": "",
    "text": "This example aims to aid a data scientist or MLEs that would like to train their model in a notebook locally and see what the results would be with out sending results to snowflake. Most MLEs and Data Scientist love to experiment and this notebook aims to allow a user to test different model types\nthe form of a notebook that does not need to have a full pipeline to wait to be able to see the results or the model artifact. This example aims to show how a DS could quickly iterate and tune their approach rather than going in a pipeline and waiting for results.\nThere will be a future example in post analysis work, which is extremely fun work, but is currently outside of the goal of this process.\nThis would mean we would need a new feature set, more thought worthy base query for eligible guest to build upon, and a new call to our dependent variable for BOUGHTPASS to push out to three years. This structure wouldn’t need to change to this point and we would quickly iterate to see if we can get a model that can predict that question.\nObviously, there is more to it than that and the post analysis work would be much more rigorous as this would be a net new model not something that has performed well over the past couple of years.\nWhat we will accomplish:\n\nPulling data from your experiment data creation.\nTrain your model using one of the models of your choice from your library.\nHaving the ability to use your model locally for your desired way of evaluating.\n\n\nThere are so many repos inside of Gitlab Vail Resorts that have so many different types of analysis approaches that the section on desired way of evaluating that if you need a spark go there and look around in the notebooks there is amazing work there.\n\n\nWarning: this is a draft to get something out that is something that gets the majority of a project work flow that exists right now\n\n\nWARINING To be able to use your scripts you need to install your library so make sure you pip install . in your terminal"
  },
  {
    "objectID": "modeling_example.html#create-data-from-data_creation-script",
    "href": "modeling_example.html#create-data-from-data_creation-script",
    "title": "Iterate Upon a Model",
    "section": "Create Data From data_creation Script",
    "text": "Create Data From data_creation Script\nThis will create your data for your training set this can take some time depending on your query.\nBelow is the output of what it would look like if you were to call the data creation\n\n# ! data_creation  --train_or_inference \"TRAINING\" --experiment_name \"BASELINE\"\n\n\n# ! data_creation  --train_or_inference 'INFERENCE' --experiment_name 'BASELINE'\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:root:This is a production run\nINFO:root:Loading Yaml Files..\nINFO:root:Generating Feature Set Query\nINFO:root:static features in data set: \n ['DESTINATIONGEOAFINITYLABEL', 'GenderCode']\nINFO:root:temporal features in data set: \n ['Age', 'AvgVisitPerSeason', 'BoughtPass', 'EverCorePass', 'EverPass', 'GuestBehavior', 'IsEpicMixActivated', 'MarketingZone', 'MostCommonTicketComp', 'MostSubSeasonVisited', 'MostVisitedRegion', 'MostVisitedResort', 'OnlySingleResortKey', 'PartnerResortScannerFlag', 'ResortsVisited', 'SkierabilityLabel', 'SubSeasonsPerYear', 'TotalSeasonsScanned', 'TotalVisits', 'VisitMostInPeak']\nINFO:root:Appending static feature DESTINATIONGEOAFINITYLABEL to query\nINFO:root:Appending static feature GenderCode to query\nINFO:root:Finished appending static features\nINFO:root:reading training_ecids_18_19.sql for base query...\nINFO:root:reading training_ecids_19_20.sql for base query...\nINFO:root:reading training_ecids_20_21.sql for base query...\nINFO:root:final query output: \n select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20171001, 20191005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20171001, 20191005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2019/20') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20151005, 20191005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20151005, 20191005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2017/18') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2017/18') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2017/18') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20171001, 20191005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20171001, 20191005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20171001, 20191005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20171001, 20191005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20171001, 20191005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20171001, 20191005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20171001, 20191005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2017/18') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20171001, 20191005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20171001, 20191005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20171001, 20191005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20171001, 20191005) as VisitMostInPeak\n\n, '2018/19' as SEASONYEAR\nfrom\n(select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('2018/19')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid \nUNION ALL\nselect\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20181001, 20201005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20181001, 20201005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2020/21') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20151005, 20201005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20151005, 20201005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2018/19') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2018/19') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2018/19') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20181001, 20201005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20181001, 20201005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20181001, 20201005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20181001, 20201005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20181001, 20201005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20181001, 20201005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20181001, 20201005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2018/19') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20181001, 20201005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20181001, 20201005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20181001, 20201005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20181001, 20201005) as VisitMostInPeak\n\n, '2019/20' as SEASONYEAR\nfrom\n(select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('2019/20')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid \nUNION ALL\nselect\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20191001, 20211005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20191001, 20211005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20151005, 20211005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20151005, 20211005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2019/20') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2019/20') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2019/20') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20191001, 20211005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20191001, 20211005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20191001, 20211005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20191001, 20211005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20191001, 20211005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20191001, 20211005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20191001, 20211005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2019/20') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20191001, 20211005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20191001, 20211005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20191001, 20211005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20191001, 20211005) as VisitMostInPeak\n\n, '2020/21' as SEASONYEAR\nfrom\n(select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('2020/21')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid\nINFO:root:Data lake path for data push projects/LTBP/FY23/LocalRunTest/training_data/\nINFO:root:Checking projects/LTBP/FY23/LocalRunTest/training_data/ to either skip creation for experiment or create a production dataset\n\n\nINFO:data_system_utilities.azure.storage:number of files in container path recursively 32\nWARNING:root:projects/LTBP/FY23/LocalRunTest/training_data/ already exists this should be do experimentation runs"
  },
  {
    "objectID": "modeling_example.html#grab-data-from-experiment",
    "href": "modeling_example.html#grab-data-from-experiment",
    "title": "Iterate Upon a Model",
    "section": "Grab Data From Experiment",
    "text": "Grab Data From Experiment\n\nfrom LTBP.data.utils import snowflake_query, get_yaml_dicts\n\nfrom LTBP.modeling.utils import (\n    create_stage_and_query_stage_sf, create_sklearn_preprocess_baseline_dict,\n    return_list_of_vars, prepare_training_set, save_sklearn_object_to_data_lake\n)\n\nimport logging\nimport os\n\n\nyaml_file_list=['features.yaml', 'udf_inputs.yaml','etl.yaml','models.yaml']\nprod_or_dev = 'dev'\nexperiment_name='BASELINE'\nexperiment = True # this will trigger if the feature set needs to be created\ntest_set = True\n\n# Grab all yaml files for current probject\nfeatures, udf_inputs, etl_dict, models_dict = get_yaml_dicts(yaml_file_list)\n\n# Create Snowflake Stage and Query Experiment location or commit location and return training data\nsf = snowflake_query(sfSchema=prod_or_dev if prod_or_dev.lower() == 'dev' else 'LTBP')\ndf_train = create_stage_and_query_stage_sf(\n    sf=sf,\n    etl=etl_dict,\n    udf_inputs=udf_inputs,\n    train_or_inference='TRAINING',\n    experiment_name=experiment_name,\n    experiment=experiment,\n    indentification=models_dict['identification']\n    )\nlogging.info(f'size of test set {df_train.shape}')\ndf_train.head(2)\n\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/BASELINE'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/training_data/\n    None\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR AGE AVGVISITPERSEASON BOUGHTPASS  \\\n0  84502625    2018/19  51                 1          0   \n1  87132129    2018/19  50               5.5          1   \n2   5384667    2018/19  53                 7          1   \n3  81281678    2018/19  44                 3          0   \n4  59615084    2018/19  41                11          1   \n\n  DESTINATIONGEOAFINITYLABEL EVERCOREPASS EVERPASS GENDERCODE GUESTBEHAVIOR  \\\n0                      Local            0        0          M          None   \n1                Destination            0        1          M      Prospect   \n2                Destination            1        1          F       PY Paid   \n3                Destination            0        0          M          None   \n4                      Local            0        1          U       PY Paid   \n\n   ...  MOSTVISITEDREGION MOSTVISITEDRESORT ONLYSINGLERESORTKEY  \\\n0  ...  Pacific Southwest                 9                   9   \n1  ...  Pacific Northwest                18                None   \n2  ...  Pacific Northwest                16                None   \n3  ...     Rocky Mountain                16                  16   \n4  ...     Rocky Mountain                 1                None   \n\n  PARTNERRESORTSCANNERFLAG RESORTSVISITED SKIERABILITYLABEL SUBSEASONSPERYEAR  \\\n0                        0              1              None                 1   \n1                        0              2              None               2.5   \n2                        0              3              None                 4   \n3                        0              1              None                 1   \n4                        0              1              None                 5   \n\n  TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK  \n0                   1           2               1  \n1                   2          11               1  \n2                   1           7               0  \n3                   1           3               1  \n4                   1          11               0  \n\n[5 rows x 24 columns]\nINFO:root:size of test set (30000, 24)\n\n\n\n\n\n\n  \n    \n      \n      ECID\n      SEASONYEAR\n      AGE\n      AVGVISITPERSEASON\n      BOUGHTPASS\n      DESTINATIONGEOAFINITYLABEL\n      EVERCOREPASS\n      EVERPASS\n      GENDERCODE\n      GUESTBEHAVIOR\n      ...\n      MOSTVISITEDREGION\n      MOSTVISITEDRESORT\n      ONLYSINGLERESORTKEY\n      PARTNERRESORTSCANNERFLAG\n      RESORTSVISITED\n      SKIERABILITYLABEL\n      SUBSEASONSPERYEAR\n      TOTALSEASONSSCANNED\n      TOTALVISITS\n      VISITMOSTINPEAK\n    \n  \n  \n    \n      0\n      84502625\n      2018/19\n      51\n      1\n      0\n      Local\n      0\n      0\n      M\n      None\n      ...\n      Pacific Southwest\n      9\n      9\n      0\n      1\n      None\n      1\n      1\n      2\n      1\n    \n    \n      1\n      87132129\n      2018/19\n      50\n      5.5\n      1\n      Destination\n      0\n      1\n      M\n      Prospect\n      ...\n      Pacific Northwest\n      18\n      None\n      0\n      2\n      None\n      2.5\n      2\n      11\n      1\n    \n  \n\n2 rows × 24 columns"
  },
  {
    "objectID": "modeling_example.html#training-model",
    "href": "modeling_example.html#training-model",
    "title": "Iterate Upon a Model",
    "section": "Training Model",
    "text": "Training Model\n\nimport LTBP.modeling.models as ds_models\n\n\nHow to Change Model In Notebook\nThis current code will run the model that is expected to run, but feel make the following change to train a logistic regression.\n\nmodels_dict[experiment_name][‘model_trainer’] –> ‘train_logistic’\n\n\nthis simply takes the model from models.py\n\nYou could also develop a new model in the notebook and push it out against your data set and see what the results are by running the following code this is just where this notebook is trying add flexibility as the overview stated\nimport xgboost as xgb\n\n\ndef train_xgb_basic(X_train, X_valid, y_train, y_valid, early_stop=10, verbose=True, **args):\n    \"\"\"\n    Binary Classifiation Xgboost Sklearn API Call Basic HyperParameters\n    \"\"\"\n    logging.info(f'Training on {X_train.shape[0]} rows')\n    model = xgb.XGBClassifier(n_jobs=-1)\n    eval_set = [(X_valid, y_valid)]\n    model.fit(X_train, y_train, eval_set=eval_set, early_stopping_rounds=early_stop, verbose=verbose)\n    return model\n\n\nTrain Model\n\n# Choosing model from models.py to use from models.yaml file\nmodel_trainer = getattr(ds_models, models_dict[experiment_name]['model_trainer'])\nmodel = model_trainer(X_train,\n                      X_valid,\n                      y_train,\n                      y_valid,\n                      evals=models_dict[experiment_name]['hyperopt_evals'],\n                      sub=models_dict[experiment_name]['hyper_opt_subsample_size'],\n                      train=models_dict[experiment_name]['training_subsample_size'])\n\nINFO:root:Hyper tuning on 24000 rows\n\n\n  0%|                                       | 0/2 [00:00<?, ?trial/s, best loss=?]\n\n\nINFO:hyperopt.tpe:build_posterior_wrapper took 0.008194 seconds\nINFO:hyperopt.tpe:TPE using 0 trials\n\n\n 50%|██████      | 1/2 [00:04<00:04,  4.36s/trial, best loss: 0.09959774525630516]\n\n\nINFO:hyperopt.tpe:build_posterior_wrapper took 0.007341 seconds\nINFO:hyperopt.tpe:TPE using 1/1 trials with best loss 0.099598\n\n\n100%|████████████| 2/2 [00:17<00:00,  8.86s/trial, best loss: 0.09959774525630516]\n\n\nINFO:root:Full training on 24000 rows"
  },
  {
    "objectID": "modeling_example.html#evaluating-model-results",
    "href": "modeling_example.html#evaluating-model-results",
    "title": "Iterate Upon a Model",
    "section": "Evaluating Model Results",
    "text": "Evaluating Model Results\nThe code below is just a simple function inside of Modeling Utilities Custom Notebook that evaluates the model the way that a user might want to do this is where you would be able to evaluate the model in a custom way or see how the plots look for your model.\nAn example of this is if you were using prophet for a forecast model you could really benefit from seeing the component plots that come out of that library to be able to make decision on where to investigate next this was very useful in the process for resort visitation forecasting\n\nfrom LTBP.modeling.custom_utils import evaluate\n\n\nresult_dict = {}\nlogging.info('Training Set Evaluation')\n\neval_list_train = evaluate(model, X_train, y_train, y_var, feature_importance=True, plot=True)\nmetric1, metric2, metric3, columns, _, _, fi_permutation = eval_list_train\nresult_dict['training_metrics']={k: v for k, v in zip(columns, [metric1]+[metric2]+[metric3])}\nresult_dict['fi_train']={k:v for k, v in fi_permutation[:10].values}\nlogging.info('Validation Set Evaluation')\neval_list_valid = evaluate(model, X_valid, y_valid, y_var, feature_importance=True, plot=True)\nmetric1, metric2, metric3, columns, y_pred_proba, y_pred, fi_permutation = eval_list_train\nresult_dict['valid_metrics']={k: v for k, v in zip(columns, [metric1]+[metric2]+[metric3])}\nresult_dict['fi_valid']={k:v for k, v in fi_permutation[:10].values}\nif X_test is not None:\n    logging.info('Test Set Evaluation')\n    eval_list_test = evaluate(model, X_test, y_test, y_var, feature_importance=True, plot=True)\n    metric1, metric2, metric3, columns, y_pred_proba, y_pred, fi_permutation = eval_list_test\n    result_dict['test_metrics']={k: v for k, v in zip(columns, [metric1]+[metric2]+[metric3])}\n    result_dict['fi_test']={k:v for k, v in fi_permutation[:10].values}\n\nINFO:root:Training Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.928    Accuracy: 0.852    Balanced Accuracy: 0.853\nINFO:root:Feature Importance df: \n                           COLS     IMP\n0                     EVERPASS  0.2228\n1         MOSTCOMMONTICKETCOMP  0.0300\n2            SUBSEASONSPERYEAR  0.0240\n3                GUESTBEHAVIOR  0.0156\n4                          AGE  0.0118\n5                 EVERCOREPASS  0.0116\n6   DESTINATIONGEOAFINITYLABEL  0.0110\n7            AVGVISITPERSEASON  0.0078\n8           ISEPICMIXACTIVATED  0.0070\n9            SKIERABILITYLABEL  0.0058\n10         ONLYSINGLERESORTKEY  0.0052\n11           MOSTVISITEDRESORT  0.0044\n12               MARKETINGZONE  0.0042\n13              RESORTSVISITED  0.0040\n14                 TOTALVISITS  0.0040\n15        MOSTSUBSEASONVISITED  0.0034\n16           MOSTVISITEDREGION  0.0030\n17         TOTALSEASONSSCANNED  0.0022\n18                  GENDERCODE  0.0014\n19             VISITMOSTINPEAK  0.0008\n20    PARTNERRESORTSCANNERFLAG -0.0004\n\n\n\n\n\n\n\n\nINFO:root:Validation Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.901    Accuracy: 0.828    Balanced Accuracy: 0.830\nINFO:root:Feature Importance df: \n                           COLS     IMP\n0                     EVERPASS  0.2262\n1         MOSTCOMMONTICKETCOMP  0.0302\n2            SUBSEASONSPERYEAR  0.0214\n3                GUESTBEHAVIOR  0.0112\n4                 EVERCOREPASS  0.0088\n5   DESTINATIONGEOAFINITYLABEL  0.0084\n6                          AGE  0.0076\n7            MOSTVISITEDRESORT  0.0066\n8           ISEPICMIXACTIVATED  0.0064\n9                  TOTALVISITS  0.0048\n10         TOTALSEASONSSCANNED  0.0044\n11           AVGVISITPERSEASON  0.0030\n12           MOSTVISITEDREGION  0.0028\n13               MARKETINGZONE  0.0016\n14         ONLYSINGLERESORTKEY  0.0016\n15                  GENDERCODE  0.0016\n16             VISITMOSTINPEAK  0.0014\n17              RESORTSVISITED  0.0014\n18           SKIERABILITYLABEL  0.0006\n19    PARTNERRESORTSCANNERFLAG  0.0002\n20        MOSTSUBSEASONVISITED  0.0000\n\n\n\n\n\n\n\n\n\n\n\nINFO:root:Test Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.900    Accuracy: 0.829    Balanced Accuracy: 0.830\nINFO:root:Feature Importance df: \n                           COLS       IMP\n0                     EVERPASS  0.222222\n1         MOSTCOMMONTICKETCOMP  0.036667\n2            SUBSEASONSPERYEAR  0.012222\n3                GUESTBEHAVIOR  0.011111\n4                 EVERCOREPASS  0.011111\n5            MOSTVISITEDREGION  0.010000\n6            AVGVISITPERSEASON  0.010000\n7         MOSTSUBSEASONVISITED  0.006667\n8          ONLYSINGLERESORTKEY  0.006667\n9                          AGE  0.005556\n10             VISITMOSTINPEAK  0.003333\n11               MARKETINGZONE  0.002222\n12              RESORTSVISITED  0.002222\n13          ISEPICMIXACTIVATED  0.001111\n14  DESTINATIONGEOAFINITYLABEL  0.001111\n15    PARTNERRESORTSCANNERFLAG  0.000000\n16           SKIERABILITYLABEL  0.000000\n17         TOTALSEASONSSCANNED  0.000000\n18           MOSTVISITEDRESORT -0.001111\n19                  GENDERCODE -0.001111\n20                 TOTALVISITS -0.003333"
  },
  {
    "objectID": "data_creation_script.html",
    "href": "data_creation_script.html",
    "title": "Data Creation Script",
    "section": "",
    "text": "This should be the default approach that we use so that all projects pull from similar data definitions\n\ndata_creation\nThis function was created to the library from the section console_scripts settings.ini.\nTo add a new CLI command please go to ./settings.ini find this section and add the scripts that you make.\nconsole_scripts = data_creation=buypass.scripts.preprocess:data_creation\n<name of command line arg> = <library name>.<path to function>.<file name>:<function name>\nWhat is happpening is this script\nWhat is happpening is this script\nOverview:\n\nGenerates a snowflake feature story query is generated from the yaml files features and udf_inputs that are needed to query the feature set of interest.\n\nget_yaml_dicts –> pull_features_from_snowflake => generates a string query to be queried\n\nThen the generated query is sent query_feature_sets_to_adls_parquet_sf_fs to then send then send to adls for the library to query in the modeling section.\n\nIf you have a use case that needs to take advantage of parquet partitioning then the function allows for that, but standard use cases haven’t needed them so that would just be a nice enhancement\n\n\n\nKey Note: the train_or_test is the trigger for test/inference data set.\n\n\nsource\n\n\n\n data_creation (yaml_file_list:list<YAMLfilestoread>,\n                train_or_inference:str<Uppercasetrainingorinference>,\n                experiment_name:str<Experimentnametoruncasesensetive>, exp\n                eriment:<Boolenifit'saexperimentoraruntorunforacommithash>\n                )\n\nCreates a feature set for a experiment data set or a production level run feature set\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nyaml_file_list\nlist \nnoqa:\n\n\ntrain_or_inference\nstr \nnoqa\n\n\nexperiment_name\nstr \nnoqa:\n\n\nexperiment\n<Boolen if it’s a experiment or a run to run for a commit hash>\nnoqa:\n\n\n\n\nexperiment = False # this will trigger if the feature set needs to be created\ntrain_or_inference = 'TRAINING' # 'INFERENCE'\nexperiment_name='BASELINE'\n\n\nlogging.info(f\"This is a {'experiment run' if experiment else 'production run'}\")\nlogging.info('Loading Yaml Files..')\nfeatures, udf_inputs, etl = get_yaml_dicts(['features.yaml', 'udf_inputs.yaml', 'etl.yaml'])\nlogging.info('Generating Feature Set Query')\n\ndata_lake_path = os.path.join(\n    (os.path.join(etl['data_lake_path'], 'experiments', experiment_name)\n     if experiment\n     else os.path.join(\n         etl['data_lake_path'],\n         os.environ.get('CI_COMMIT_SHA', 'LocalRunTest'),\n         experiment_name\n     )\n    ), train_or_inference.lower()+'_data/')\ndata_lake_path\n\n\"\"\"\nThis is to help a user develop locally for the script if things are changing best method is to pull the above\ncell into this one and begin to develop or you can do this is a .py file, but this is my prefered method\n\"\"\"\nexperiment = True # this will trigger if the feature set needs to be created\ntrain_or_inference = 'TRAINING' # 'INFERENCE'\nexperiment_name='BASELINE'\n\n\nlogging.info(f\"This is a {'experiment run' if experiment else 'production run'}\")\nlogging.info('Loading Yaml Files..')\nfeatures, udf_inputs, etl = get_yaml_dicts(['features.yaml', 'udf_inputs.yaml', 'etl.yaml'])\nlogging.info('Generating Feature Set Query')\nquery = pull_features_from_snowflake(feature_dict=features,\n                                     udf_inputs=udf_inputs[train_or_inference.upper()],\n                                     filepath_to_grain_list_query='./LTBP/files/sql_files/',\n                                     experiment_name=experiment_name)\ndata_lake_path = os.path.join((os.path.join(etl['data_lake_path'], 'experiments', experiment_name)\n                  if experiment \n                  else os.path.join(etl['data_lake_path'], \n                                    os.environ.get('CI_COMMIT_SHA', 'LocalRunTest')))\n                 , train_or_inference.lower()+'_data/')\nlogging.info(f'Checking {data_lake_path} to either skip creation for experiment or create a production dataset')\nfh = FileHandling(os.environ['DATALAKE_CONN_STR_SECRET'])\n\nald_files = fh.ls_blob(path=data_lake_path, container_name=etl['azure_container'])\nsf = snowflake_query()\nif ald_files == []:\n    query_feature_sets_to_adls_parquet_sf_fs(\n        sf_connection=sf,\n        sf_query=query,\n        query_file_path=os.path.join(files.__path__[0], etl['query_file_path']),\n        azure_account=etl[\"azure_account\"],\n        azure_container=etl[\"azure_container\"],\n        data_lake_path=data_lake_path, # TODO: Think about experiments versus \n        partition_by=None,\n        data_lake_sas_token=os.environ[\"DATALAKE_SAS_TOKEN_SECRET\"],\n    )\nelse:\n    logging.warning(f'{data_lake_path} already exists this should be do experimentation runs')\n\nINFO:root:This is a production run\nINFO:root:Loading Yaml Files..\nINFO:root:Generating Feature Set Query\n\n\n'projects/LTBP/FY23/LocalRunTest/BASELINE/training_data/'\n\n\n\nfrom LTBP.data.utils import snowflake_query, get_yaml_dicts, generate_data_lake_query\nfrom LTBP import files\n\nfrom data_system_utilities.file_parsers import yaml\nfrom data_system_utilities.snowflake.utils import make_stage_query_generator\n\n\nstage_url = f\"\"\"azure://{etl['azure_account']}.blob.core.windows.net/\n{etl['azure_container']}/{etl['data_lake_path']}{\n(os.path.join('experiments', experiment_name)\nif experiment \nelse os.path.join('LocalRunTest'))}\"\"\".replace('\\n', '')\nstage_query = make_stage_query_generator(\n    stage_name=etl[\"stage_name\"] + etl['FY_folder'] + os.environ.get('CI_COMMIT_SHA', 'LocalRunTest'),\n    url=stage_url,\n    sas_token=os.environ[\"DATALAKE_SAS_TOKEN_SECRET\"],\n    file_type=\"parquet\",\n)\n_ = sf.run_sql_str(stage_query)\n# TODO: Figure out a identification feature like season year \n# Udf grain is ECID, which is easy to get, but season year isn't obivous some thought is needed\nindentification = [col.split('.')[-1] for col in udf_inputs[train_or_inference]['UDF_GRAIN']]\ncolumns = [col.upper() for col in features.keys()]\nquery = generate_data_lake_query(stage_name=(etl[\"stage_name\"] \n                                             + etl['FY_folder'] \n                                             + os.environ.get('CI_COMMIT_SHA', 'LocalRunTest')),\n     stage_path=train_or_inference.lower()+'_data/',\n     columns=indentification + columns,\n     extra_statement=None)\nlogging.info(f'adls snowflake stage query {query}')\ndf = sf.run_sql_str(query)\nlogging.info(f'Preview dataframe queried {df.head()}')\n\n\n\"\"\"\nThis is to help a user develop locally for the script if things are changing best method is to pull the above\ncell into this one and begin to develop or you can do this is a .py file, but this is my prefered method\n\"\"\"\nexperiment = 'True' # this will trigger if the feature set needs to be created\ntrain_or_inference ='INFERENCE'\nexperiment_name='BASELINE'\n\n\nexperiment = True if experiment.lower() == 'true' else False\nlogging.info(f\"This is a {'experiment run' if experiment else 'production run'}\")\nlogging.info('Loading Yaml Files..')\nfeatures, udf_inputs, etl = get_yaml_dicts(['features.yaml', 'udf_inputs.yaml', 'etl.yaml'])\nlogging.info('Generating Feature Set Query')\nquery = pull_features_from_snowflake(feature_dict=features,\n                                     udf_inputs=udf_inputs[train_or_inference.upper()],\n                                     filepath_to_grain_list_query='./LTBP/files/sql_files/',\n                                     experiment_name=experiment_name)\ndata_lake_path = os.path.join((os.path.join(etl['data_lake_path'], 'experiments', experiment_name)\n                  if experiment \n                  else os.path.join(etl['data_lake_path'], \n                                    os.environ.get('CI_COMMIT_SHA', 'LocalRunTest')))\n                 , train_or_inference.lower()+'_data/')\nlogging.info(f'Checking {data_lake_path} to either skip creation for experiment or create a production dataset')\nfh = FileHandling(os.environ['DATALAKE_CONN_STR_SECRET'])\n\nald_files = fh.ls_blob(path=data_lake_path, container_name=etl['azure_container'])\nsf = snowflake_query()\nif ald_files == []:\n    query_feature_sets_to_adls_parquet_sf_fs(\n        sf_connection=sf,\n        sf_query=query,\n        query_file_path=os.path.join(files.__path__[0], etl['query_file_path']),\n        azure_account=etl[\"azure_account\"],\n        azure_container=etl[\"azure_container\"],\n        data_lake_path=data_lake_path, # TODO: Think about experiments versus \n        partition_by=None,\n        data_lake_sas_token=os.environ[\"DATALAKE_SAS_TOKEN_SECRET\"],\n    )\nelse:\n    logging.warning(f'{data_lake_path} already exists this should be do experimentation runs')\n\nINFO:root:This is a experiment run\nINFO:root:Loading Yaml Files..\nINFO:root:Generating Feature Set Query\nINFO:root:static features in data set: \n ['DESTINATIONGEOAFINITYLABEL', 'GenderCode']\nINFO:root:temporal features in data set: \n ['Age', 'AvgVisitPerSeason', 'BoughtPass', 'EverCorePass', 'EverPass', 'GuestBehavior', 'IsEpicMixActivated', 'MarketingZone', 'MostCommonTicketComp', 'MostSubSeasonVisited', 'MostVisitedRegion', 'MostVisitedResort', 'OnlySingleResortKey', 'PartnerResortScannerFlag', 'ResortsVisited', 'SkierabilityLabel', 'SubSeasonsPerYear', 'TotalSeasonsScanned', 'TotalVisits', 'VisitMostInPeak']\nINFO:root:Appending static feature DESTINATIONGEOAFINITYLABEL to query\nINFO:root:Appending static feature GenderCode to query\nINFO:root:Finished appending static features\nINFO:root:reading inference_base.sql for base query...\nINFO:root:final query output: \n select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20190101, 20221005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20190101, 20221005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2021/22') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2021/22') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2021/22') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20190101, 20221005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20190101, 20221005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20190101, 20221005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2021/22') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20190101, 20221005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20190101, 20221005) as VisitMostInPeak\n\n, '2021/22' as SEASONYEAR\nfrom\n(-- base EDEE team guest behavior\n  with edee_base as (\n      SELECT \n            distinct ECID\n      from BIDE_EDWDB_CUSTOMERMART_PROD.DBO.CustomerPASSPURCHASEBEHAVIOR cla\n      where \n              cla.GuestPassPurchaseBehaviorDetailLabel <> 'Unknown'\n  ),\n\n  -- pass prospects not in guest behavior\n  prospects as (\n      Select\n            distinct ECID\n      from Vail_Reporting.Prod.GuestBehaviorBase\n      where \n              GuestBehavior = 'Prospect'\n          and salesseason = '2021/22'\n  ),\n\n  -- paid prospects not in guest behavior\n  other_scans as (\n      select\n            distinct a.ECID\n      from\n      (\n          select \n                distinct ECID\n              , SeasonYear\n          from \"BIDE_EDWDB_ARA_PROD\".\"DBO\".\"SCANDAY\"\n              where Season = 'Winter'\n      ) a\n      left join Vail_Reporting.Prod.GuestBehaviorBase b \n          on a.ECID = b.ECID and a.SeasonYear = b.SalesSeason\n      where \n              b.GuestBehavior is null\n          and a.seasonyear = '2021/22'\n  )\n\n  select\n        distinct ECID\n      , 'Inference Set' as SeasonYear\n  from\n  (\n      select\n            coalesce(base.ecid, pro.ecid, os.ecid) as ecid\n      from edee_base base\n      full outer join prospects pro\n          on pro.ecid = base.ecid\n      full outer join other_scans os\n          on os.ecid = base.ecid\n  ) a)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid\nINFO:root:Checking projects/LTBP/FY23/experiments/BASELINE/inference_data/ to either skip creation for experiment or create a production dataset\nINFO:data_system_utilities.azure.storage:number of files in container path recursively 0\nINFO:data_system_utilities.snowflake.copyinto:\nCOPY INTO 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/BASELINE/inference_data/'\nFROM (select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20190101, 20221005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20190101, 20221005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2021/22') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2021/22') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2021/22') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20190101, 20221005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20190101, 20221005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20190101, 20221005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2021/22') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20190101, 20221005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20190101, 20221005) as VisitMostInPeak\n\n, '2021/22' as SEASONYEAR\nfrom\n(-- base EDEE team guest behavior\n  with edee_base as (\n      SELECT \n            distinct ECID\n      from BIDE_EDWDB_CUSTOMERMART_PROD.DBO.CustomerPASSPURCHASEBEHAVIOR cla\n      where \n              cla.GuestPassPurchaseBehaviorDetailLabel <> 'Unknown'\n  ),\n\n  -- pass prospects not in guest behavior\n  prospects as (\n      Select\n            distinct ECID\n      from Vail_Reporting.Prod.GuestBehaviorBase\n      where \n              GuestBehavior = 'Prospect'\n          and salesseason = '2021/22'\n  ),\n\n  -- paid prospects not in guest behavior\n  other_scans as (\n      select\n            distinct a.ECID\n      from\n      (\n          select \n                distinct ECID\n              , SeasonYear\n          from \"BIDE_EDWDB_ARA_PROD\".\"DBO\".\"SCANDAY\"\n              where Season = 'Winter'\n      ) a\n      left join Vail_Reporting.Prod.GuestBehaviorBase b \n          on a.ECID = b.ECID and a.SeasonYear = b.SalesSeason\n      where \n              b.GuestBehavior is null\n          and a.seasonyear = '2021/22'\n  )\n\n  select\n        distinct ECID\n      , 'Inference Set' as SeasonYear\n  from\n  (\n      select\n            coalesce(base.ecid, pro.ecid, os.ecid) as ecid\n      from edee_base base\n      full outer join prospects pro\n          on pro.ecid = base.ecid\n      full outer join other_scans os\n          on os.ecid = base.ecid\n  ) a)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid)\n\nmax_file_size = 3200000\noverwrite = True\nfile_format = (type = parquet          )\ncredentials= (azure_sas_token = '**MASKED**')\nheader = True;\n\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:data has been delivered from sf to adls"
  },
  {
    "objectID": "models.html",
    "href": "models.html",
    "title": "Models",
    "section": "",
    "text": "source\n\nHpOptBinary\n\n HpOptBinary (X_train, X_test, y_train, y_test, parameter_space=None,\n              model=<class 'xgboost.sklearn.XGBClassifier'>,\n              loss_function=<function roc_auc_score>, loss_params={},\n              loss_pred_proba=True)\n\nClass that hypertunes an arbitrary model for binary classification\nThis is the DSDE standard process for using Xboost with hyperopt\n\nsource\n\n\ntrain_xgb\n\n train_xgb (X_train, X_valid, y_train, y_valid, evals=20, sub=200000,\n            train=1000000, early_stop=10, verbose=False, **args)\n\nBinary Classifiation Xgboost DSDE hyper opt approach this should be reviewed and customized for your use case.\n\nsource\n\n\ntrain_xgb_basic\n\n train_xgb_basic (X_train, X_valid, y_train, y_valid, early_stop=10,\n                  verbose=True, **args)\n\nBinary Classifiation Xgboost Sklearn API Call Basic HyperParameters\n\nsource\n\n\ntrain_logistic\n\n train_logistic (X_train, X_test, y_train, y_test, model=<class\n                 'sklearn.linear_model._logistic.LogisticRegression'>,\n                 evals=20, sub=200000, train=1000000)\n\nLogistic Regression Example to show how simple this can be to switch the model being used in this template"
  },
  {
    "objectID": "inference_script.html",
    "href": "inference_script.html",
    "title": "Inference Script",
    "section": "",
    "text": "Local Development\nWhat ended up happening here was that during the development process there is a desire to be able to have more than one production model that then can logic on top of that as a view to do things like an ensemble or have predictions for a cohort that the model doesn’t perform well in allowing for that cohort to have a different prediction. Regardless of the reason that functionality seems to be important for the future so having it written is good it is a little messy.\nThe logical question is why wouldn’t we want to do the same thing for training a model and the simplest answer to that is that model training is much longer than inference. Also for none production models this will still need a matrix call that allows concurrency or pushing to multi vms similar to shazam and resort visitation forecasting.\nWhen we have two differing models that have things like for example a different data structure like a deep learning model and a sklearn model then this design will need to have more work done.\nAgain this process is to get us to a safe location to work quickly with small amounts of changes when working in the 80-90% of the current projects. In the future we will have a more class like structure allowing for more flexibility hang in there with us as we develop the next stage of the modeling process here at vail\n\nexperiment_name = 'BASELINE'\nexperiment = False\nyaml_file_list = ['features.yaml', 'udf_inputs.yaml', 'etl.yaml', 'models.yaml']\nsfSchema='LTBP'\n\nfeatures, udf_inputs, etl_dict, models_dict = get_yaml_dicts(yaml_file_list)\n\nadls_paths = []\nmodel_names = []\nexperiment_names = []\nexperiments = []\ncommit_ids = []\nif sfSchema.lower() != 'dev':\n    sf = snowflake_query(sfSchema=sfSchema)\n    prod_model = sf.run_sql_str(f'''SELECT * \n    FROM MACHINELEARNINGOUTPUTS.{sfSchema}.{models_dict['tracking_table']}\n    WHERE PRODUCTION_MODEL\n    ''')\n    sf.run_sql_str(f\"DROP TABLE IF EXISTS MACHINELEARNINGOUTPUTS.{sfSchema}.{models_dict['inference_sf_table_name']}\")\n    for i, v in prod_model.iterrows():\n        adls_path = os.path.join(\n        (os.path.join(etl_dict['data_lake_path'], 'experiments', v['EXPERIMENT_NAME'])\n          if v['EXPERIMENT']\n          else os.path.join(\n              etl_dict['data_lake_path'], v['COMMITID'], v['EXPERIMENT_NAME'])))\n        adls_paths.append(adls_path)\n        model_name = (models_dict[v['EXPERIMENT_NAME']]['model_trainer']+\n                      v['COMMITID']+\n                      v['EXPERIMENT_NAME']+'.pkl'\n                     )\n        model_names.append(model_name)\n        experiment_names.append(v['EXPERIMENT_NAME'])\n        experiments.append(v['EXPERIMENT'])\n        commit_ids.append(v['COMMITID'])\nelse:\n    adls_path = os.path.join(\n            (os.path.join(etl_dict['data_lake_path'], 'experiments', experiment_name)\n             if experiment\n             else os.path.join(\n                etl_dict['data_lake_path'], os.environ.get('CI_COMMIT_SHA', 'LocalRunNBS'))))\n    adls_paths.append(adls_path)\n    model_name = (models_dict[experiment_name]['model_trainer']\n                  + os.environ.get('CI_COMMIT_SHA', 'LocalRunNBS')\n                  + experiment_name+'.pkl'\n                  )\n    model_names.append(model_name)\n    experiment_names.append(experiment_name)\n    experiments.append(experiment)\n\nfor adl_path, model_name, exp_name, com_id in zip(adls_paths, model_names, experiment_names, commit_ids):\n    df_infer = create_stage_and_query_stage_sf(\n        sf=sf,\n        features=features,\n        etl=etl_dict,\n        udf_inputs=udf_inputs,\n        train_or_inference='INFERENCE',\n        experiment_name=exp_name,\n        experiment=experiment,\n        indentification=models_dict['identification'],\n        extra_statement='LIMIT 1000'  # Can add limit when experimenting 'LIMIT 1000'\n    )\n    model = pull_sklearn_object_from_adls(\n            adls_path=os.path.join(adl_path,\n                                   models_dict['modeling_adls_path'],\n                                   models_dict[exp_name]['model_trainer']\n                                  ) + '/',\n            file_name=model_name,\n            drop_local_path='./models/',\n            container_name=etl_dict['azure_container'],\n            connection_str=os.environ[models_dict['connection_str']]\n        )\n    sf_df = df_infer[models_dict['identification']].copy()\n    # Change Here Name change for a regression and to predict or multi-labled needs some work\n    sf_df['PROBABILITY'] = model.predict_proba(df_infer)[:, 1]\n    date_created = datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')\n    sf_df['CI_COMMIT_SHA'] = os.environ.get('CI_COMMIT_SHA', 'LocalRunNBS')\n    sf_df['DATE_CREATED'] = datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')\n    sf_df['EXPERIMENT'] = exp_name\n    file_name = f\"predictions_{os.environ.get('CI_COMMIT_SHA','LocalRunNBS')+exp_name}.csv\"\n    # Saving as a .csv for simple reading from adls download using dask would be best here\n    sf_df.to_csv(file_name, index=False)\n    logging.info(f'preview predictions being added:\\n{sf_df.head(3)}')\n    logging.info(f'preview predictions values addes:\\n{sf_df.iloc[0].values}')\n    logging.info(f'preview predictions being added columns:\\n{sf_df.columns}')\n    adl_path = (adl_path if sfSchema.lower() == 'dev' and experiment\n     else os.path.join((os.path.join(\n         etl_dict['data_lake_path'], 'experiments', experiment_name)\n                        if experiment\n                        else\n                        os.path.join(etl_dict['data_lake_path'],com_id,exp_name))\n                      )\n               )\n    az = FileHandling(os.environ[models_dict['connection_str']])\n    az.upload_file(\n        azure_file_path=os.path.join(adl_path,\n                                     models_dict['predictions_adls_path'],\n                                     models_dict[exp_name]['model_trainer']),\n        local_file_path=file_name,\n        container_name=etl_dict['azure_container'],\n        overwrite=True,\n    )\n    os.unlink(file_name)\n    stage_url = f\"azure://{etl_dict['azure_account']}.blob.core.windows.net/{etl_dict['azure_container']}/\"\n    preds_file_path = os.path.join(adl_path,\n                                   models_dict['predictions_adls_path'],\n                                   models_dict[exp_name]['model_trainer'],\n                                   file_name)\n\n    sf = snowflake_query(sfSchema=sfSchema)\n    if models_dict['inference_sf_table_name'].upper() not in sf.run_sql_str(\"show tables;\").name.tolist():\n        sf.run_sql_str(create_table_query_from_df(sf_df, table_name_sf=models_dict['inference_sf_table_name'], varchar=False))\n    logging.info(\"Pushing Forecasted Season from ADLS to Snowflake\")\n    adls_query = adls_url_to_sf_query_generator(\n        azure_path=os.path.join(stage_url, preds_file_path),\n        azure_sas_token=os.environ[models_dict['sas_token']],\n        table_name=models_dict['inference_sf_table_name'],\n        database=sf.connection_inputs['database'],\n        schema=sf.connection_inputs['schema'],\n        skip_header='1',\n        file_type='csv',\n        pattern='.*.csv')\n    sf.run_sql_str(adls_query)\n\n    exp_table = sf.run_sql_str(f\"\"\"\n    SELECT *\n    FROM {models_dict['inference_sf_table_name']}\n    WHERE DATE_CREATED = '{date_created}'\n    AND EXPERIMENT = '{exp_name}'\n    LIMIT 3\n    \"\"\")\n    logging.info(f'preview of queried table being added:\\n{exp_table.head(3)}')\n    logging.info(f'preview predictions values addes:\\n{exp_table.iloc[0].values}')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/BASELINE/'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/inference_data/\n    LIMIT 1000\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR AGE AVGVISITPERSEASON BOUGHTPASS  \\\n0  57591278    2021/22   3                 0          0   \n1  75561307    2021/22  21                 0          0   \n2   4662642    2021/22  59                 0          0   \n3  55384020    2021/22  28                 0          0   \n4    230261    2021/22  32                 0          0   \n\n  DESTINATIONGEOAFINITYLABEL EVERCOREPASS EVERPASS GENDERCODE GUESTBEHAVIOR  \\\n0                    Unknown            0        0          F   Lapsed Paid   \n1                Destination            0        0          F   Lapsed Paid   \n2                Destination            0        0          M   Lapsed Paid   \n3                      Local            0        0          M   Lapsed Paid   \n4                Destination            0        0          F   Lapsed Paid   \n\n   ... MOSTVISITEDREGION MOSTVISITEDRESORT ONLYSINGLERESORTKEY  \\\n0  ...              None              None                None   \n1  ...              None              None                None   \n2  ...              None              None                None   \n3  ...              None              None                None   \n4  ...              None              None                None   \n\n  PARTNERRESORTSCANNERFLAG RESORTSVISITED SKIERABILITYLABEL SUBSEASONSPERYEAR  \\\n0                        0              0              None              None   \n1                        0              0              None              None   \n2                        0              0              None              None   \n3                        0              0              None              None   \n4                        0              0              None              None   \n\n  TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK  \n0                   0           0               0  \n1                   0           0               0  \n2                   0           0               0  \n3                   0           0               0  \n4                   0           0               0  \n\n[5 rows x 24 columns]\nINFO:root:Loading Sklearn Object to: ./models/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Downloading projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb/train_xgbLocalRunTestBASELINE.pkl to ./models/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Download complete\nINFO:root:Sklearn Object Loaded\nINFO:root:preview predictions being added:\n       ECID SEASONYEAR  PROBABILITY CI_COMMIT_SHA         DATE_CREATED  \\\n0  57591278    2021/22     0.029840  LocalRunTest  2022-11-04 07:43:55   \n1  75561307    2021/22     0.045436  LocalRunTest  2022-11-04 07:43:55   \n2   4662642    2021/22     0.045249  LocalRunTest  2022-11-04 07:43:55   \n\n  EXPERIMENT  \n0   BASELINE  \n1   BASELINE  \n2   BASELINE  \nINFO:root:preview predictions values addes:\n['57591278' '2021/22' 0.029840026 'LocalRunTest' '2022-11-04 07:43:55'\n 'BASELINE']\nINFO:root:preview predictions being added columns:\nIndex(['ECID', 'SEASONYEAR', 'PROBABILITY', 'CI_COMMIT_SHA', 'DATE_CREATED',\n       'EXPERIMENT'],\n      dtype='object')\nINFO:data_system_utilities.azure.storage:Uploading predictions_LocalRunTestBASELINE.csv, to Azure Storage projects/LTBP/FY23/LocalRunTest/BASELINE/predictions/train_xgb/predictions_LocalRunTestBASELINE.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Pushing Forecasted Season from ADLS to Snowflake\nINFO:data_system_utilities.snowflake.copyinto:\ncopy into MACHINELEARNINGOUTPUTS.LTBP.LTBP_PREDICTIONS_FY23\nfrom 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/BASELINE/predictions/train_xgb/predictions_LocalRunTestBASELINE.csv'\nfile_format = (type = csv     skip_header = 1)\ncredentials= (azure_sas_token = '?sv=2019-12-12&ss=bfqt&srt=sco&sp=rwdlacupx&se=2031-01-22T06:17:14Z&st=2021-01-21T22:17:14Z&spr=https&sig=kIHogByJjyVWyL6XupA0CBUB1iw12%2FeXWFQiOj5fB5c%3D')\npattern = '.*.csv';\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:preview of queried table being added:\n       ECID SEASONYEAR  PROBABILITY CI_COMMIT_SHA         DATE_CREATED  \\\n0  57591278    2021/22     0.029840  LocalRunTest  2022-11-04 07:43:55   \n1  75561307    2021/22     0.045436  LocalRunTest  2022-11-04 07:43:55   \n2   4662642    2021/22     0.045249  LocalRunTest  2022-11-04 07:43:55   \n\n  EXPERIMENT  \n0   BASELINE  \n1   BASELINE  \n2   BASELINE  \nINFO:root:preview predictions values addes:\n['57591278' '2021/22' 0.029840026 'LocalRunTest' '2022-11-04 07:43:55'\n 'BASELINE']\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/NOHYPEROPT/'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\n\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/inference_data/\n    LIMIT 1000\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR AGE AVGVISITPERSEASON BOUGHTPASS  \\\n0  63649827    2021/22  21                 0          0   \n1  74541784    2021/22  32                 0          0   \n2  70305244    2021/22  40                 0          0   \n3  34674698    2021/22  36                 0          0   \n4  28216761    2021/22  35                 0          0   \n\n  DESTINATIONGEOAFINITYLABEL EVERCOREPASS EVERPASS GENDERCODE GUESTBEHAVIOR  \\\n0                    Unknown            0        0          F   Lapsed Paid   \n1                    Unknown            0        0          F   Lapsed Paid   \n2                Destination            0        0          M   Lapsed Paid   \n3                Destination            0        0          F   Lapsed Paid   \n4              International            0        0          F   Lapsed Paid   \n\n   ... MOSTVISITEDREGION MOSTVISITEDRESORT ONLYSINGLERESORTKEY  \\\n0  ...              None              None                None   \n1  ...              None              None                None   \n2  ...              None              None                None   \n3  ...              None              None                None   \n4  ...              None              None                None   \n\n  PARTNERRESORTSCANNERFLAG RESORTSVISITED SKIERABILITYLABEL SUBSEASONSPERYEAR  \\\n0                        0              0              None              None   \n1                        0              0              None              None   \n2                        0              0              None              None   \n3                        0              0              None              None   \n4                        0              0              None              None   \n\n  TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK  \n0                   0           0               0  \n1                   0           0               0  \n2                   0           0               0  \n3                   0           0               0  \n4                   0           0               0  \n\n[5 rows x 24 columns]\nINFO:root:Loading Sklearn Object to: ./models/train_xgb_basicLocalRunTestNOHYPEROPT.pkl\nINFO:data_system_utilities.azure.storage:Downloading projects/LTBP/FY23/experiments/NOHYPEROPT/modeling/train_xgb_basic/train_xgb_basicLocalRunTestNOHYPEROPT.pkl to ./models/train_xgb_basicLocalRunTestNOHYPEROPT.pkl\nINFO:data_system_utilities.azure.storage:Download complete\nINFO:root:Sklearn Object Loaded\nINFO:root:preview predictions being added:\n       ECID SEASONYEAR  PROBABILITY CI_COMMIT_SHA         DATE_CREATED  \\\n0  63649827    2021/22     0.020158  LocalRunTest  2022-11-04 07:44:03   \n1  74541784    2021/22     0.022840  LocalRunTest  2022-11-04 07:44:03   \n2  70305244    2021/22     0.028208  LocalRunTest  2022-11-04 07:44:03   \n\n   EXPERIMENT  \n0  NOHYPEROPT  \n1  NOHYPEROPT  \n2  NOHYPEROPT  \nINFO:root:preview predictions values addes:\n['63649827' '2021/22' 0.020157771 'LocalRunTest' '2022-11-04 07:44:03'\n 'NOHYPEROPT']\nINFO:root:preview predictions being added columns:\nIndex(['ECID', 'SEASONYEAR', 'PROBABILITY', 'CI_COMMIT_SHA', 'DATE_CREATED',\n       'EXPERIMENT'],\n      dtype='object')\nINFO:data_system_utilities.azure.storage:Uploading predictions_LocalRunTestNOHYPEROPT.csv, to Azure Storage projects/LTBP/FY23/LocalRunTest/NOHYPEROPT/predictions/train_xgb_basic/predictions_LocalRunTestNOHYPEROPT.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Pushing Forecasted Season from ADLS to Snowflake\nINFO:data_system_utilities.snowflake.copyinto:\ncopy into MACHINELEARNINGOUTPUTS.LTBP.LTBP_PREDICTIONS_FY23\nfrom 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/NOHYPEROPT/predictions/train_xgb_basic/predictions_LocalRunTestNOHYPEROPT.csv'\nfile_format = (type = csv     skip_header = 1)\ncredentials= (azure_sas_token = '?sv=2019-12-12&ss=bfqt&srt=sco&sp=rwdlacupx&se=2031-01-22T06:17:14Z&st=2021-01-21T22:17:14Z&spr=https&sig=kIHogByJjyVWyL6XupA0CBUB1iw12%2FeXWFQiOj5fB5c%3D')\npattern = '.*.csv';\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:preview of queried table being added:\n       ECID SEASONYEAR  PROBABILITY CI_COMMIT_SHA         DATE_CREATED  \\\n0  63649827    2021/22     0.020158  LocalRunTest  2022-11-04 07:44:03   \n1  74541784    2021/22     0.022840  LocalRunTest  2022-11-04 07:44:03   \n2  70305244    2021/22     0.028208  LocalRunTest  2022-11-04 07:44:03   \n\n   EXPERIMENT  \n0  NOHYPEROPT  \n1  NOHYPEROPT  \n2  NOHYPEROPT  \nINFO:root:preview predictions values addes:\n['63649827' '2021/22' 0.020157771 'LocalRunTest' '2022-11-04 07:44:03'\n 'NOHYPEROPT']"
  },
  {
    "objectID": "data_utils.html",
    "href": "data_utils.html",
    "title": "Data Utils",
    "section": "",
    "text": "source\n\nget_yaml_dicts\n\n get_yaml_dicts (yaml_file_names:list)\n\nGive a list of files to this function from the /files in a library and it will read/Parse yaml files and return a list of dictionaries to unpack\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nyaml_file_names\nlist\nlist of yaml file(s) names that are all in the yaml_files section of the repo\n\n\n\n\nfeatures, inputs = get_yaml_dicts(['features.yaml', 'udf_inputs.yaml'])\n\n\nsource\n\n\ngenerate_data_lake_query\n\n generate_data_lake_query (stage_name:str, stage_path:str, columns:list,\n                           header:bool=True, dtypes:list=None,\n                           extra_statement:str=None)\n\nGiven the columns names are provided this query will query out parquet data from azure datalake all in varchar this is the basic approach.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstage_name\nstr\n\nname of the sf stage to be created is just a file location pointer\n\n\nstage_path\nstr\n\nadls file path location to start the stage location\n\n\ncolumns\nlist\n\ncolumns to query parquet files in adls\n\n\nheader\nbool\nTrue\nparquet files have headers\n\n\ndtypes\nlist\nNone\ndefaults to Varchar when None else\n\n\nextra_statement\nstr\nNone\nadding sql statements if desired\n\n\n\nThere will be times where having the dtype could be very important to your process so you would want to be able to query it into memory with the correct dtype, but in this process there hasn’t been a reason to do that so it is skipped in LTBP\n\ncolumns = ['destinationgeoafinitylabel','evercorepass','everpass','gendercode','guestbehavior',]\ndtypes = ['VARCHAR', 'BOOLEAN', 'BOOLEAN', 'NUMBER', 'FLOAT']\n\nquery = generate_data_lake_query(stage_name='LTBPLocalRunTest',\n     stage_path='projects/LTBP/FY23/experiments/<EXPERIMENT_NAME>/training_data/'.replace('<EXPERIMENT_NAME>', 'ltbp_nbs_testing'),\n     columns=columns,\n     dtypes=dtypes,\n     extra_statement=None)\nprint(query)\n\n\n    select\n    $1:\"destinationgeoafinitylabel\"::VARCHAR as destinationgeoafinitylabel\n, $1:\"evercorepass\"::BOOLEAN as evercorepass\n, $1:\"everpass\"::BOOLEAN as everpass\n, $1:\"gendercode\"::NUMBER as gendercode\n, $1:\"guestbehavior\"::FLOAT as guestbehavior\n\n    from @LTBPLocalRunTest/projects/LTBP/FY23/experiments/ltbp_nbs_testing/training_data/\n    None\n    \n\n\n\ncolumns = ['destinationgeoafinitylabel','evercorepass','everpass','gendercode','guestbehavior',\n           'isepicmixactivated','marketingzone','mostcommonticketcomp','mostsubseasonvisited',\n           'mostvisitedregion','mostvisitedresort','onlysingleresortkey','partnerresortscannerflag',\n           'skierabilitylabel','totalseasonsscanned','visitmostinpeak','age','avgvisitperseason',\n           'resortsvisited','subseasonsperyear','totalvisits']\n\nquery = generate_data_lake_query(stage_name='LTBPLocalRunTest',\n     stage_path='projects/LTBP/FY23/experiments/<EXPERIMENT_NAME>/training_data/'.replace('<EXPERIMENT_NAME>', 'ltbp_nbs_testing'),\n     columns=columns,\n     extra_statement=None)\nprint(query)\n\n\n    select\n    $1:\"destinationgeoafinitylabel\"::varchar as destinationgeoafinitylabel\n, $1:\"evercorepass\"::varchar as evercorepass\n, $1:\"everpass\"::varchar as everpass\n, $1:\"gendercode\"::varchar as gendercode\n, $1:\"guestbehavior\"::varchar as guestbehavior\n, $1:\"isepicmixactivated\"::varchar as isepicmixactivated\n, $1:\"marketingzone\"::varchar as marketingzone\n, $1:\"mostcommonticketcomp\"::varchar as mostcommonticketcomp\n, $1:\"mostsubseasonvisited\"::varchar as mostsubseasonvisited\n, $1:\"mostvisitedregion\"::varchar as mostvisitedregion\n, $1:\"mostvisitedresort\"::varchar as mostvisitedresort\n, $1:\"onlysingleresortkey\"::varchar as onlysingleresortkey\n, $1:\"partnerresortscannerflag\"::varchar as partnerresortscannerflag\n, $1:\"skierabilitylabel\"::varchar as skierabilitylabel\n, $1:\"totalseasonsscanned\"::varchar as totalseasonsscanned\n, $1:\"visitmostinpeak\"::varchar as visitmostinpeak\n, $1:\"age\"::varchar as age\n, $1:\"avgvisitperseason\"::varchar as avgvisitperseason\n, $1:\"resortsvisited\"::varchar as resortsvisited\n, $1:\"subseasonsperyear\"::varchar as subseasonsperyear\n, $1:\"totalvisits\"::varchar as totalvisits\n\n    from @LTBPLocalRunTest/projects/LTBP/FY23/experiments/ltbp_nbs_testing/training_data/\n    None\n    \n\n\n\nsource\n\n\nread_sfQueries_txt_sql_file\n\n read_sfQueries_txt_sql_file (file_name:str)\n\nSimple utilty to read query files\n\n\n\n\nType\nDetails\n\n\n\n\nfile_name\nstr\nsql file name to read\n\n\n\n\nsource\n\n\nreturn_sf_type\n\n return_sf_type (dtype:str, varchar:bool=True)\n\nsimple function to convert dytpes to snowflake dtypes this will be come a very useful thing to have as this will dtype\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndtype\nstr\n\ndata type from a df in string form\n\n\nvarchar\nbool\nTrue\nto default all variables to VARCHAR\n\n\n\n\nsource\n\n\nsnowflake_query\n\n snowflake_query (sfAccount:str='vailresorts.east-us-2.azure',\n                  sfUser:str='SVC_DS_MANAGER_SF@vailresorts.com',\n                  sfPswd:str='UEKF8ph4wbDP!', sfWarehouse:str=None,\n                  sfDatabase:str='MACHINELEARNINGOUTPUTS',\n                  sfSchema:str='DEV', sfRole:str='SNOWFLAKE_DS_USER')\n\nEasy Connection To SnowFlake When Environs are set\n\nsource\n\n\nquery_feature_sets_to_adls_parquet_sf_fs\n\n query_feature_sets_to_adls_parquet_sf_fs (sf_connection, sf_query:str,\n                                           azure_account:str,\n                                           azure_container:str,\n                                           data_lake_path:str,\n                                           data_lake_sas_token:str,\n                                           partition_by:str=None,\n                                           max_file_size:str='3200000',\n                                           header:str='True',\n                                           over_write:str='True')\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsf_connection\n\n\nestablished snowflake connection\n\n\nsf_query\nstr\n\nsql query desired to be pushed to adls\n\n\nazure_account\nstr\n\nazure acount name\n\n\nazure_container\nstr\n\nazure container name to push results to\n\n\ndata_lake_path\nstr\n\nadls file path location to dump files to\n\n\ndata_lake_sas_token\nstr\n\nmost project use os.environ[“DATALAKE_SAS_TOKEN_SECRET”]\n\n\npartition_by\nstr\nNone\nsave data in a paritions manner\n\n\nmax_file_size\nstr\n3200000\nchoose the file size you would like to save your parquet files\n\n\nheader\nstr\nTrue\nsaving with headers or not needs to be a string\n\n\nover_write\nstr\nTrue\nif file(s) exisit this will earse exisiting files\n\n\n\n\nsource\n\n\nclean_special_chars\n\n clean_special_chars (text)\n\nsmall nlp clean up tool to take odd characters that could be in vendor data inside of column names and then replaces empty spaces with _\nArgs: * text (str): dataframe column names as strings\nReturns: * str: clean column name\n\nsource\n\n\nselect_multi_input_udfs\n\n select_multi_input_udfs (feature_dict:dict, udf_inputs:dict, query:str,\n                          sf_database:str, sf_schema:str, iteration:int,\n                          exp_name:str)\n\nutility function called by pull_features_from_snowflake to create multi input snowflake udf calls UDF_NAME(Input 1, Input 2) a common example is at the ecid grain ISEPICMIXACTIVATED(ECID, 20201001, 20211001)\nArgs: feature_dict (dict): multi key dictionary of features with information the function will end up using to create a dynamic call udf_inputs (dict): all information needed for the udf inputs to be created. query (str): query string being manipulated sf_database (str): snowflake database the udfs live in sf_schema (str): snowflake schema the udfs live in iteration (int): iteration give the function the ability to know what inputs are going to be passed to the udf\nReturns: str: manipulated query string\nThese functions are small twist on MSU already created calls to incorporate experimentation names to the mix to allow for sequential or concurrent calls to python scripts to allow for a smoother and faster iteration of experiments to happen.\n\nsource\n\n\npull_features_from_snowflake\n\n pull_features_from_snowflake (feature_dict:dict, udf_inputs:dict,\n                               filepath_to_grain_list_query:str=None,\n                               sf_database:str='MACHINELEARNINGFEATURES',\n                               sf_schema:str='PROD',\n                               feature_table_join:str=None,\n                               extra_statement:str=None,\n                               experiment_name:str='BASELINE')\n\na function to allow a user dynamically create snowflake queries that creates a feature set that will be transformed into inputs that are suitable for ML like task. this function starts with a pre-determined list that will define a grain (most commonly used at the ECID grain) that will dynamically call snowflake sql udf(s) and possibliy join a table that has static like features that will create a dataset.\nTo have more understanding of this function and the useability please visit (https://vailresorts.gitlab.io/data-science/machine_learning_utilities/)\nArgs: feature_dict (dict): this dictionary will have information on all the features a user is looking to gather in one feature set. Each feature will need a feature_type, input_type, input_definition, and a udf_name. udf_inputs (dict): this dictionary will have all the information needed for non “static” like features that are being created via the joined table. This dictionary will need to have a key UDF_GRAIN, FEATURE, LABEL, BASE_QUERY. filepath_to_grain_list_query (str, optional): file location of sql files to read. sf_database (str, optional): snowflake database UDFs live. Defaults to ‘MACHINELEARNINGFEATURES’. sf_schema (str, optional): snowflake schema UDFs live. Defaults to ‘PROD’. feature_table_join (str, optional): a table other than the feature store to join to this dynamic call that will have all the static features needed to complete the feature set note the table alias on the join statment must be joined. Defaults to None. extra_statement (str, optional): allows for additional sql statements i.e LIMIT 1000. Defaults to None.\nReturns: str: mainpulated string query ready to be sent to snowflake"
  },
  {
    "objectID": "modeling_script.html",
    "href": "modeling_script.html",
    "title": "Modeling Script",
    "section": "",
    "text": "Script\nThis is the DSDE standard process for using Xboost with hyperopt\n\nsource\n\nmodel_train\n\n model_train (yaml_file_list:list<YAMLfilestoread>,\n              experiment_name:str<YAMLsectiontoread>,\n              experiment:<YAMLsectiontoread>,\n              test_set:<CreateaTestSetFromTrainingData>, sfSchema:str<devq\n              ueriesdevschemaanythingelsewillqueryprojectschema>)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nyaml_file_list\nlist \nnoqa:\n\n\nexperiment_name\nstr \nnoqa:\n\n\nexperiment\n\nnoqa:\n\n\ntest_set\n\nnoqa:\n\n\nsfSchema\nstr \nnoqa:\n\n\n\n\n\n\nLocal Development Code\nHere is where the development of the script can be improved this code should run sequentially happy coding\n\nyaml_file_list=['features.yaml', 'udf_inputs.yaml','etl.yaml','models.yaml']\nprod_or_dev = 'dev'\nexperiment_name='BASELINE'\nexperiment = True # this will trigger if the feature set needs to be created\ntest_set = True\n\n# Grab all yaml files for current probject\nfeatures, udf_inputs, etl_dict, models_dict = get_yaml_dicts(yaml_file_list)\n\n# Create Snowflake Stage and Query Experiment location or commit location and return training data\nsf = snowflake_query(sfSchema=prod_or_dev if prod_or_dev.lower() == 'dev' else 'LTBP')\ndf = create_stage_and_query_stage_sf(\n    sf=sf,\n    etl=etl_dict,\n    udf_inputs=udf_inputs,\n    train_or_inference='TRAINING',\n    experiment_name=experiment_name,\n    experiment=experiment,\n    indentification=models_dict['identification']\n    )\n\n# Choosing an adls path depending on experiment being true or false\nadls_path = os.path.join(\n    (os.path.join(etl_dict['data_lake_path'], 'experiments', experiment_name)\n     if experiment\n     else os.path.join(\n         etl_dict['data_lake_path'],\n         os.environ.get('CI_COMMIT_SHA', 'LocalRunNBS'))\n    )\n    , models_dict['preprocessors_adls_path']\n    , models_dict['BASELINE']['model_trainer'])\n\n# Grab all Categorical and Continous Variables for Modeling\ncat_vars = [{f.upper(): values['transformation'][experiment_name]} for f, values in features.items()\n            if values['var_type'][experiment_name] == 'cat'\n            and values['input_definition'] != 'LABEL']\ncont_vars = [{f.upper(): values['transformation'][experiment_name]} for f, values in features.items()\n             if values['var_type'][experiment_name] == 'cont'\n             and values['input_definition'] != 'LABEL']\ny_var = [k.upper() for k, v in features.items() if v['input_definition'] == 'LABEL']\n\n# Create Dictionary and create sklearn preprocessing Pipeline\nfeature_dict = create_sklearn_preprocess_baseline_dict(cat_vars=cat_vars,\n                                                       cont_vars=cont_vars)\nlogging.info(feature_dict)\ncat_vars = return_list_of_vars(cat_vars)\ncont_vars = return_list_of_vars(cont_vars)\nlogging.info(f\"categorical variables: \\n {cat_vars}\")\nlogging.info(f\"continous variables: \\n {cont_vars}\")\npipe = preprocessing.generate_sklearn_preprocessing_pipeline(\n    feature_dict, impute=True, impute_strategy='mean'\n)\n\n# Preprocess and split data set to return neccessary object for modeling\nresult = prepare_training_set(df,\n                              y_var=[k.upper() for k, v in features.items() if v['input_definition'] == 'LABEL'],\n                              y_scaler_type=models_dict[experiment_name]['y_scaler_type'],\n                              adls_path=adls_path,\n                              sklearn_pipe=pipe,\n                              test_set=test_set,\n                              etl_dict=etl_dict,\n                              models_dict=models_dict,\n                              connection_str=os.environ[models_dict[\"connection_str\"]],\n                              experiment_name=experiment_name,\n                              as_type=int,\n                              identifiers=['ECID', 'SEASONYEAR']\n                              )\nif test_set:\n    X_train, X_valid, X_test, y_train, y_valid, y_test, sklearn_pipe, scaler, id_list = result\nelse:\n    X_train, X_valid, y_train, y_valid, sklearn_pipe, scaler, id_list = result\n\n# Choosing model from models.py to use from models.yaml file\nmodel_trainer = getattr(ds_models, models_dict[experiment_name]['model_trainer'])\nmodel = model_trainer(X_train,\n                      X_valid,\n                      y_train,\n                      y_valid,\n                      evals=models_dict[experiment_name]['hyperopt_evals'],\n                      sub=models_dict[experiment_name]['hyper_opt_subsample_size'],\n                      train=models_dict[experiment_name]['training_subsample_size'])\n\n\"\"\"\nCustom needs for each project type this works for a binary classification\nthis is not my best work, but trying to put something together\nthis is dry I am sure i could make this just a few lines\n\"\"\"\nresult_dict = {}\nlogging.info('Training Set Evaluation')\n\neval_list_train = evaluate(model, X_train, y_train, y_var, feature_importance=True, plot=True)\nmetric1, metric2, metric3, columns, _, _, fi_permutation = eval_list_train\nresult_dict['training_metrics'] = {k: v for k, v in zip(columns, [metric1]+[metric2]+[metric3])}\nresult_dict['fi_train'] = {k: v for k, v in fi_permutation[:10].values}\nlogging.info('Validation Set Evaluation')\neval_list_valid = evaluate(model, X_valid, y_valid, y_var, feature_importance=True, plot=True)\nmetric1, metric2, metric3, columns, y_pred_proba, y_pred, fi_permutation = eval_list_valid\nresult_dict['valid_metrics'] = {k: v for k, v in zip(columns, [metric1]+[metric2]+[metric3])}\nresult_dict['fi_valid'] = {k: v for k, v in fi_permutation[:10].values}\nif X_test is not None:\n    logging.info('Test Set Evaluation')\n    eval_list_test = evaluate(model, X_test, y_test, y_var, feature_importance=True, plot=True)\n    metric1, metric2, metric3, columns, y_pred_proba, y_pred, fi_permutation = eval_list_test\n    result_dict['test_metrics'] = {k: v for k, v in zip(columns, [metric1]+[metric2]+[metric3])}\n    result_dict['fi_test'] = {k: v for k, v in fi_permutation[:10].values}\n\nsf = snowflake_query(sfSchema='LTBP')\nsend_holdout_results_to_sf(sf=sf,\n                           id_list=id_list,\n                           probs=y_pred_proba,\n                           experiment=experiment,\n                           experiment_name=experiment_name,\n                           etl_dict=etl_dict,\n                           model_dict=models_dict)\n\nadls_path = os.path.join(\n    (os.path.join(etl_dict['data_lake_path'], 'experiments', experiment_name)\n     if experiment else os.path.join(\n         etl_dict['data_lake_path'], os.environ.get('CI_COMMIT_SHA', 'LocalRunNBS'))\n    )\n)\n\ncustom_project_log = [\n    {\n        'action_description': models_dict[experiment_name][\"description\"],\n        'transaction_type': \"model_training\",\n        'commitid': os.getenv(\"CI_COMMIT_SHA\", 'LocalRunNBS'),\n        'environment': os.getenv(\"prod_or_dev\", None),\n        'branch': os.getenv(\"CI_COMMIT_REF_SLUG\", None),\n        'timestamp': datetime.datetime.now(pytz.timezone(\"US/Mountain\")).strftime('%Y-%m-%d %H:%M:%S'),\n        'artifacts': json.dumps({\"azure_parent_folder\": adls_path}),\n        'metrics': json.dumps(result_dict),\n        'experiment_name' : experiment_name,\n        'experiment' : experiment,\n        'production_model' : False,\n        'ever_production' : False,              \n    }\n]\n\nproject_log_df = project_log.project_log(\n    snowflake_connection=sf,\n    table_name=models_dict['tracking_table'],\n    custom_schema=custom_project_log,\n    append_or_replace=\"append\",\n)\nlogging.info(f'project log preview:\\n{project_log_df}')\nlogging.info(f'project log values preview:\\n{project_log_df.loc[0].values}')\n\n# Saving sklearn pipeline to adls\nlogging.info('Saving model and sending it to adls')\nfull_pipeline = Pipeline([('preprocessing', pipe), ('classification', model)])\nadls_path = os.path.join(adls_path\n                         , models_dict['modeling_adls_path']\n                         , models_dict['BASELINE']['model_trainer'])\nsave_sklearn_object_to_data_lake(\n    save_object=full_pipeline,\n    adls_path=adls_path,\n    file_name=(models_dict[experiment_name]['model_trainer']+\n               os.environ.get('CI_COMMIT_SHA', 'LocalRunNBS')+\n               experiment_name+'.pkl'\n              ),\n    container_name=etl_dict['azure_container'],\n    connection_str=os.environ[models_dict['connection_str']]\n)\n\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/BASELINE'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/training_data/\n    None\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR AGE AVGVISITPERSEASON BOUGHTPASS  \\\n0  49436302    2018/19  11                 1          0   \n1  80007527    2018/19  31              16.5          1   \n2  75608339    2018/19  47               2.5          0   \n3  27418903    2018/19  23                19          0   \n4  62624119    2018/19  38               9.5          1   \n\n  DESTINATIONGEOAFINITYLABEL EVERCOREPASS EVERPASS GENDERCODE GUESTBEHAVIOR  \\\n0                Destination            0        0          M       PY Paid   \n1                      Local            1        1          M       PY Paid   \n2                Destination            0        0          F       PY Paid   \n3                      Local            1        1          M      Prospect   \n4                Destination            1        1          M       PY Paid   \n\n   ...  MOSTVISITEDREGION MOSTVISITEDRESORT ONLYSINGLERESORTKEY  \\\n0  ...  Pacific Southwest                 8                   8   \n1  ...     Rocky Mountain                 3                None   \n2  ...  Pacific Northwest                18                None   \n3  ...     Rocky Mountain                15                None   \n4  ...          Northeast                19                None   \n\n  PARTNERRESORTSCANNERFLAG RESORTSVISITED SKIERABILITYLABEL SUBSEASONSPERYEAR  \\\n0                        0              1              None                 1   \n1                        0              2          Advanced               5.5   \n2                        0              2      Intermediate                 1   \n3                        0              1          Advanced               7.5   \n4                        0              2              None                 2   \n\n  TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK  \n0                   1           1               1  \n1                   2          33               1  \n2                   2           5               1  \n3                   2          38               0  \n4                   2          19               1  \n\n[5 rows x 24 columns]\nINFO:root:{'DESTINATIONGEOAFINITYLABEL': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'EVERCOREPASS': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'EVERPASS': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'GENDERCODE': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'GUESTBEHAVIOR': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'ISEPICMIXACTIVATED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MARKETINGZONE': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTCOMMONTICKETCOMP': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTSUBSEASONVISITED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTVISITEDREGION': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTVISITEDRESORT': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'ONLYSINGLERESORTKEY': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'PARTNERRESORTSCANNERFLAG': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'SKIERABILITYLABEL': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'TOTALSEASONSSCANNED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'VISITMOSTINPEAK': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'AGE': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'AVGVISITPERSEASON': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'RESORTSVISITED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'SUBSEASONSPERYEAR': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'TOTALVISITS': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}}\nINFO:root:categorical variables: \n ['DESTINATIONGEOAFINITYLABEL', 'EVERCOREPASS', 'EVERPASS', 'GENDERCODE', 'GUESTBEHAVIOR', 'ISEPICMIXACTIVATED', 'MARKETINGZONE', 'MOSTCOMMONTICKETCOMP', 'MOSTSUBSEASONVISITED', 'MOSTVISITEDREGION', 'MOSTVISITEDRESORT', 'ONLYSINGLERESORTKEY', 'PARTNERRESORTSCANNERFLAG', 'SKIERABILITYLABEL', 'TOTALSEASONSSCANNED', 'VISITMOSTINPEAK']\nINFO:root:continous variables: \n ['AGE', 'AVGVISITPERSEASON', 'RESORTSVISITED', 'SUBSEASONSPERYEAR', 'TOTALVISITS']\nINFO:machine_learning_utilities.preprocessing:Creating Sklearn Preprocessing Pipeline\nINFO:machine_learning_utilities.preprocessing:Feature: DESTINATIONGEOAFINITYLABEL --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n\n\nINFO:machine_learning_utilities.preprocessing:Feature: EVERCOREPASS --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: EVERPASS --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: GENDERCODE --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: GUESTBEHAVIOR --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: ISEPICMIXACTIVATED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MARKETINGZONE --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTCOMMONTICKETCOMP --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTSUBSEASONVISITED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTVISITEDREGION --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTVISITEDRESORT --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: ONLYSINGLERESORTKEY --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: PARTNERRESORTSCANNERFLAG --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: SKIERABILITYLABEL --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: TOTALSEASONSSCANNED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: VISITMOSTINPEAK --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: AGE --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Feature: AVGVISITPERSEASON --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Feature: RESORTSVISITED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: SUBSEASONSPERYEAR --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Feature: TOTALVISITS --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Imputing missing data with mean strategy\nINFO:machine_learning_utilities.preprocessing:Preprocessing Pipeline Object:\nPipeline(steps=[('preprocessing',\n                 FeatureUnion(transformer_list=[('pipeline-1',\n                                                 Pipeline(steps=[('functiontransformer',\n                                                                  FunctionTransformer(func=<function get_cat_cols>,\n                                                                                      kw_args={'cols': ['DESTINATIONGEOAFINITYLABEL']})),\n                                                                 ('ordinalencoder',\n                                                                  OrdinalEncoder(handle_unknown='use_encoded_value',\n                                                                                 unknown_value=-1))])),\n                                                ('pipeline-2',\n                                                 Pipeline(steps=[('...\n                                                                  FunctionTransformer(func=<function get_cont_cols>,\n                                                                                      kw_args={'cols': ['SUBSEASONSPERYEAR']})),\n                                                                 ('standardscaler',\n                                                                  StandardScaler())])),\n                                                ('pipeline-21',\n                                                 Pipeline(steps=[('functiontransformer',\n                                                                  FunctionTransformer(func=<function get_cont_cols>,\n                                                                                      kw_args={'cols': ['TOTALVISITS']})),\n                                                                 ('standardscaler',\n                                                                  StandardScaler())]))])),\n                ('imputing', SimpleImputer())])\nINFO:root:Successfully Spilt Data\nTrain: (24000, 24), (24000, 1)\nValid: (5100, 24), (5100, 1)\nTest: (900, 24), (900, 1)\nINFO:root:Size of the id_list for the hold set (900, 2)\nINFO:root:This project relies on the query to have accurate labels with no preprocessing..\nINFO:root:Pushing Sklearn Object to Azure: projects/LTBP/FY23/experiments/BASELINE/preprocessors/train_xgb/LocalRunTeststandard_pipe.pickle\nINFO:data_system_utilities.azure.storage:Uploading LocalRunTeststandard_pipe.pickle, to Azure Storage projects/LTBP/FY23/experiments/BASELINE/preprocessors/train_xgb/LocalRunTeststandard_pipe.pickle\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:root:LocalRunTeststandard_pipe.pickle successfully pushed to projects/LTBP/FY23/experiments/BASELINE/preprocessors/train_xgb\nINFO:root:Hyper tuning on 24000 rows\n\n\n  0%|                                   | 0/2 [00:00<?, ?trial/s, best loss=?]\n\n\nINFO:hyperopt.tpe:build_posterior_wrapper took 0.007822 seconds\nINFO:hyperopt.tpe:TPE using 0 trials\n\n\n 50%|████    | 1/2 [00:08<00:08,  8.58s/trial, best loss: 0.09631553418146976]\n\n\nINFO:hyperopt.tpe:build_posterior_wrapper took 0.008316 seconds\nINFO:hyperopt.tpe:TPE using 1/1 trials with best loss 0.096316\n\n\n100%|████████| 2/2 [00:12<00:00,  6.34s/trial, best loss: 0.09087793146491441]\n\n\nINFO:root:Full training on 24000 rows\n\n\n\n\n\nINFO:root:Training Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.905    Accuracy: 0.834    Balanced Accuracy: 0.836\nINFO:root:Feature Importance df: \n                           COLS     IMP\n0                     EVERPASS  0.2648\n1         MOSTCOMMONTICKETCOMP  0.0264\n2            SUBSEASONSPERYEAR  0.0158\n3                GUESTBEHAVIOR  0.0110\n4                          AGE  0.0068\n5          TOTALSEASONSSCANNED  0.0068\n6                  TOTALVISITS  0.0036\n7                 EVERCOREPASS  0.0036\n8   DESTINATIONGEOAFINITYLABEL  0.0032\n9            AVGVISITPERSEASON  0.0024\n10           MOSTVISITEDREGION  0.0022\n11         ONLYSINGLERESORTKEY  0.0020\n12           SKIERABILITYLABEL  0.0020\n13              RESORTSVISITED  0.0020\n14        MOSTSUBSEASONVISITED  0.0016\n15          ISEPICMIXACTIVATED  0.0012\n16                  GENDERCODE  0.0004\n17    PARTNERRESORTSCANNERFLAG  0.0002\n18               MARKETINGZONE  0.0002\n19           MOSTVISITEDRESORT  0.0002\n20             VISITMOSTINPEAK  0.0000\n\n\n\n\n\n\n\n\nINFO:root:Validation Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.905    Accuracy: 0.834    Balanced Accuracy: 0.835\nINFO:root:Feature Importance df: \n                           COLS     IMP\n0                     EVERPASS  0.2576\n1         MOSTCOMMONTICKETCOMP  0.0266\n2            SUBSEASONSPERYEAR  0.0138\n3                GUESTBEHAVIOR  0.0110\n4          TOTALSEASONSSCANNED  0.0064\n5                  TOTALVISITS  0.0026\n6                 EVERCOREPASS  0.0026\n7   DESTINATIONGEOAFINITYLABEL  0.0022\n8            SKIERABILITYLABEL  0.0020\n9           ISEPICMIXACTIVATED  0.0018\n10        MOSTSUBSEASONVISITED  0.0014\n11         ONLYSINGLERESORTKEY  0.0012\n12                         AGE  0.0010\n13              RESORTSVISITED  0.0010\n14    PARTNERRESORTSCANNERFLAG  0.0004\n15           AVGVISITPERSEASON  0.0002\n16               MARKETINGZONE -0.0002\n17             VISITMOSTINPEAK -0.0002\n18           MOSTVISITEDREGION -0.0004\n19           MOSTVISITEDRESORT -0.0006\n20                  GENDERCODE -0.0010\n\n\n\n\n\n\n\n\n\n\n\nINFO:root:Test Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.883    Accuracy: 0.799    Balanced Accuracy: 0.802\nINFO:root:Feature Importance df: \n                           COLS       IMP\n0                     EVERPASS  0.230000\n1            SUBSEASONSPERYEAR  0.033333\n2         MOSTCOMMONTICKETCOMP  0.026667\n3                 EVERCOREPASS  0.010000\n4                  TOTALVISITS  0.006667\n5                GUESTBEHAVIOR  0.005556\n6            MOSTVISITEDREGION  0.003333\n7            AVGVISITPERSEASON  0.003333\n8   DESTINATIONGEOAFINITYLABEL  0.003333\n9              VISITMOSTINPEAK  0.002222\n10                         AGE  0.002222\n11        MOSTSUBSEASONVISITED  0.001111\n12    PARTNERRESORTSCANNERFLAG  0.001111\n13         TOTALSEASONSSCANNED  0.001111\n14           SKIERABILITYLABEL  0.000000\n15              RESORTSVISITED  0.000000\n16           MOSTVISITEDRESORT  0.000000\n17               MARKETINGZONE -0.002222\n18                  GENDERCODE -0.002222\n19          ISEPICMIXACTIVATED -0.003333\n20         ONLYSINGLERESORTKEY -0.004444\n\n\n\n\n\n\n\n\n\n\n\nINFO:root:hold out data preview going to snowflake             ECID SEASONYEAR  PROBABILITY          DATECREATED  \\\n14448  102541768    2019/20     0.188354  2022-11-03 14:26:03   \n12515  103317074    2019/20     0.158204  2022-11-03 14:26:03   \n2167    56452604    2019/20     0.508148  2022-11-03 14:26:03   \n\n           EXP_COMMIT_CI_SHA  \n14448  BASELINE_LocalRunTest  \n12515  BASELINE_LocalRunTest  \n2167   BASELINE_LocalRunTest  \nINFO:data_system_utilities.snowflake.query:creating table LTBP_HOLDOUT_TEST_MODEL_RESULTS\nINFO:data_system_utilities.snowflake.query:sqlalchemy snowflake engine created\nINFO:data_system_utilities.snowflake.query:table created\nINFO:root:saving test prediction file\nINFO:root:sending prediction file to azure to projects/LTBP/FY23/experiments/BASELINE/holdout_results/train_xgb/\nINFO:data_system_utilities.azure.storage:Uploading holdout_BASELINELocalRunTest.csv, to Azure Storage projects/LTBP/FY23/experiments/BASELINE/holdout_results/train_xgb/holdout_BASELINELocalRunTest.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.query:creating table LTBP_MODEL_TRACKING_FY23\nINFO:data_system_utilities.snowflake.query:sqlalchemy snowflake engine created\nINFO:data_system_utilities.snowflake.query:table created\nINFO:root:project log preview:\n                                  ACTION_DESCRIPTION TRANSACTION_TYPE  \\\n0  Standard baseline xgb_hyperopt approach status...   model_training   \n\n       COMMITID ENVIRONMENT  BRANCH            TIMESTAMP  \\\n0  LocalRunTest         dev  random  2022-11-03 15:26:08   \n\n                                           ARTIFACTS  \\\n0  {\"azure_parent_folder\": \"projects/LTBP/FY23/ex...   \n\n                                             METRICS EXPERIMENT_NAME  \\\n0  {\"training_metrics\": {\"auc\": 0.905141572110986...        BASELINE   \n\n   EXPERIMENT  PRODUCTION_MODEL  EVER_PRODUCTION  \n0        True             False            False  \nINFO:root:project log values preview:\n['Standard baseline xgb_hyperopt approach status quo of LTBP of the past'\n 'model_training' 'LocalRunTest' 'dev' 'random' '2022-11-03 15:26:08'\n '{\"azure_parent_folder\": \"projects/LTBP/FY23/experiments/BASELINE\"}'\n '{\"training_metrics\": {\"auc\": 0.9051415721109867, \"acc\": 0.8343333333333334, \"bacc\": 0.8355776247859253}, \"fi_train\": {\"EVERPASS\": 0.2647999999999999, \"MOSTCOMMONTICKETCOMP\": 0.02639999999999998, \"SUBSEASONSPERYEAR\": 0.015799999999999925, \"GUESTBEHAVIOR\": 0.01100000000000001, \"AGE\": 0.006799999999999917, \"TOTALSEASONSSCANNED\": 0.006799999999999917, \"TOTALVISITS\": 0.0035999999999999366, \"EVERCOREPASS\": 0.0035999999999999366, \"DESTINATIONGEOAFINITYLABEL\": 0.0031999999999999806, \"AVGVISITPERSEASON\": 0.0023999999999999577}, \"valid_metrics\": {\"auc\": 0.9047741862633534, \"acc\": 0.8341176470588235, \"bacc\": 0.8350952288136023}, \"fi_valid\": {\"EVERPASS\": 0.25760000000000005, \"MOSTCOMMONTICKETCOMP\": 0.026599999999999957, \"SUBSEASONSPERYEAR\": 0.013800000000000034, \"GUESTBEHAVIOR\": 0.01100000000000001, \"TOTALSEASONSSCANNED\": 0.006399999999999961, \"TOTALVISITS\": 0.0026000000000000467, \"EVERCOREPASS\": 0.0026000000000000467, \"DESTINATIONGEOAFINITYLABEL\": 0.0021999999999999797, \"SKIERABILITYLABEL\": 0.0020000000000000018, \"ISEPICMIXACTIVATED\": 0.0018000000000000238}, \"test_metrics\": {\"auc\": 0.8831961530080624, \"acc\": 0.7988888888888889, \"bacc\": 0.8017026207880192}, \"fi_test\": {\"EVERPASS\": 0.22999999999999998, \"SUBSEASONSPERYEAR\": 0.033333333333333326, \"MOSTCOMMONTICKETCOMP\": 0.026666666666666616, \"EVERCOREPASS\": 0.010000000000000009, \"TOTALVISITS\": 0.006666666666666599, \"GUESTBEHAVIOR\": 0.005555555555555536, \"MOSTVISITEDREGION\": 0.0033333333333332993, \"AVGVISITPERSEASON\": 0.0033333333333332993, \"DESTINATIONGEOAFINITYLABEL\": 0.0033333333333332993, \"VISITMOSTINPEAK\": 0.0022222222222222365}}'\n 'BASELINE' True False False]\nINFO:root:Saving model and sending it to adls\nINFO:root:Pushing Sklearn Object to Azure: projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Uploading train_xgbLocalRunTestBASELINE.pkl, to Azure Storage projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:root:train_xgbLocalRunTestBASELINE.pkl successfully pushed to projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb\n\n\n\n\n\nThese just help clean up the tables that would be created by this notebook make sure you only use the below code when in development otherwise you production or your dev results that you have could be deleted.\n\n# sf.run_sql_str(f\"DROP TABLE {models_dict['tracking_table']}\")\n# sf.run_sql_str(f\"DROP TABLE MACHINELEARNINGOUTPUTS.dev.{models_dict['hold_out_table']}\")"
  },
  {
    "objectID": "data_preparation_example.html",
    "href": "data_preparation_example.html",
    "title": "Data Creation Process",
    "section": "",
    "text": "Final Remarks\nCongrats you have built your first Vail UDF Snowflake Query for both a Training and Validation\n\n\n\nimage.png\n\n\nClick Me\nAs always please ask questions or make improvements to the documentation"
  },
  {
    "objectID": "model_utilities_custom.html",
    "href": "model_utilities_custom.html",
    "title": "Model Utils",
    "section": "",
    "text": "source\n\nevaluate\n\n evaluate (model, X_valid, y_valid, y_var, feature_importance:bool=True,\n           plot:bool=False)\n\nUtlity to give experiment table information about the model this is fully customizable and can be changed to be regression RMSE, R2, MSE for example and changing the columns this function isn’t a dynamic function it needs to be written for a specific use case.\nArgs: * model (classifer): sklearn model for this * X_valid (np.array): Validation set Traing * y_valid (np.array): Actuals for Validation * y_var (str): variable name being predicted\nReturns: * dict: dependent on return statement\n\nsource\n\n\nsend_holdout_results_to_sf\n\n send_holdout_results_to_sf (sf, id_list:list, probs, experiment,\n                             experiment_name, etl_dict, model_dict,\n                             drop_table:bool=False)\n\n\nsource\n\n\nmove_dev_holdout_table_to_prod_location\n\n move_dev_holdout_table_to_prod_location (sf, exp)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Overview",
    "section": "",
    "text": "pip install LTBP\n\ncoming soon private github pypi token to allow for easy install"
  },
  {
    "objectID": "index.html#ltbp-use-cases",
    "href": "index.html#ltbp-use-cases",
    "title": "Project Overview",
    "section": "LTBP Use Cases",
    "text": "LTBP Use Cases\nIn 2023/24 this project plans on being the replacement to LTR, which historically was used to help subpress media dollar spend for guest segments.\nThe details of this use case will be filled out as the 22/23 winter season rolls through as we gear up for another year of pass sales."
  },
  {
    "objectID": "index.html#ltbp-result-overview",
    "href": "index.html#ltbp-result-overview",
    "title": "Project Overview",
    "section": "LTBP Result Overview",
    "text": "LTBP Result Overview\nCurrent Fiscal Season Results:\nDevelopment Results:\n\nMACHINLEARNINGOUTPUTS.DEV.LTBP_PREDICTIONS\n\n\nNote: Development results will be something that we move around as more scale begins to happen, but that isn’t solved as of now.\n\nProduction Snowflake Table:\n\nMACHINLEARNINGOUTPUTS.LTBP.LTBP_PREDICTIONS\n\nTotal Predictions:\n\n\ntotal_preds\n\n\n\n\n\n  \n    \n      \n      TOTAL_POP\n    \n  \n  \n    \n      0\n      14759852\n    \n  \n\n\n\n\nExample of Prediction Table Output:\n\n\nexample_output\n\n\n\n\n\n  \n    \n      \n      ECID\n      PROBABILITY\n    \n  \n  \n    \n      0\n      61068721\n      0.038751\n    \n    \n      1\n      130053505\n      0.492399\n    \n    \n      2\n      49940527\n      0.051959\n    \n    \n      3\n      74112965\n      0.034402\n    \n    \n      4\n      32759861\n      0.004805\n    \n    \n      5\n      57941408\n      0.002742\n    \n    \n      6\n      13674145\n      0.065647\n    \n    \n      7\n      60909761\n      0.009027\n    \n    \n      8\n      97172783\n      0.002126\n    \n    \n      9\n      131977740\n      0.109056\n    \n  \n\n\n\n\nSchema:\n\n\n\n\n\n\n\nVariable Name\nDescription\n\n\n\n\nECID\nCustomer Key\n\n\nPROBABILITY\nThe estimated probability that this ECID will buy a Pass in this Fiscal Year\n\n\n\nLabel Logic:\nLTBP is composed of five bins low, low-med, medium, med-high high. In the past, there was an attempt to optimize the return rate to be heavy in low, but for simplicity and scalability of this project, DSDE decided to use NTILE, which creates equal buckets for the five labeled groups.\n\n\nNTILE_breakdown\n\n\n\n\n\n  \n    \n      \n      LIKELIHOODTOBUYPASSLABEL\n      TOTAL\n    \n  \n  \n    \n      0\n      High\n      2951970\n    \n    \n      1\n      Medium\n      2951970\n    \n    \n      2\n      Med-High\n      2951970\n    \n    \n      3\n      Low-Med\n      2951971\n    \n    \n      4\n      Low\n      2951971\n    \n  \n\n\n\n\nExample of what the output looks like with ntile(s) assoicated with the raw probability output \n\nexample_of_ntile\n\n\n\n\n\n  \n    \n      \n      ECID\n      PROBABILITY\n      NTILE_5\n      LIKELIHOODTOBUYPASSLABEL\n    \n  \n  \n    \n      0\n      131035762\n      0.999566\n      5\n      High\n    \n    \n      1\n      112628819\n      0.999552\n      5\n      High\n    \n    \n      2\n      138473097\n      0.999544\n      5\n      High\n    \n    \n      3\n      102515974\n      0.999541\n      5\n      High\n    \n    \n      4\n      136960602\n      0.999527\n      5\n      High\n    \n    \n      5\n      131977201\n      0.999525\n      5\n      High\n    \n    \n      6\n      137118754\n      0.999525\n      5\n      High\n    \n    \n      7\n      137071085\n      0.999522\n      5\n      High\n    \n    \n      8\n      131795763\n      0.999518\n      5\n      High\n    \n    \n      9\n      58857511\n      0.999517\n      5\n      High\n    \n  \n\n\n\n\nCurrent Season 2022/23 Results  \n\ncurrent_season_results\n\n\n\n\n\n  \n    \n      \n      LIKELIHOODTOBUYPASSLABEL\n      RECORDS\n      FY22_PASSHOLDER\n      NOPASSPURCHASE\n      FY22CONVERSIONRATE\n    \n  \n  \n    \n      0\n      High\n      2951970\n      1108113\n      1843857\n      0.375381\n    \n    \n      1\n      Med-High\n      2951970\n      69263\n      2882707\n      0.023463\n    \n    \n      2\n      Medium\n      2951970\n      30164\n      2921806\n      0.010218\n    \n    \n      3\n      Low-Med\n      2951971\n      24155\n      2927816\n      0.008183\n    \n    \n      4\n      Low\n      2951971\n      12742\n      2939229\n      0.004316"
  },
  {
    "objectID": "index.html#model-specifics",
    "href": "index.html#model-specifics",
    "title": "Project Overview",
    "section": "Model Specifics",
    "text": "Model Specifics\nDescription of LTBP Production Model:\n\n\nmodels_dict[experiment_name]['description']\n\n'Standard baseline xgb_hyperopt approach status quo of LTBP of the past'\n\n\nModel Name in side of LTBP Repo:\n\n\nmodels_dict[experiment_name]['model_trainer']\n\n'train_xgb'"
  },
  {
    "objectID": "model_utilities.html",
    "href": "model_utilities.html",
    "title": "Model Utils",
    "section": "",
    "text": "source\n\nreturn_dict_type\n\n return_dict_type (pre_process_type:dict)\n\nSimplify the standard process for sklearn preprocessing pipelines\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npre_process_type\ndict\n{k:v} dictionary of columns name and tranformation type\n\n\n\n\nfrom data_system_utilities.file_parsers import yaml\n\nfeatures=yaml.yaml_reader('./LTBP/files/yaml_files/features.yaml')\nexperiment_name='BASELINE'\ncat_vars =[{f.lower() : values['transformation'][experiment_name]} for f, values in features.items() \n            if values['var_type'][experiment_name] == 'cat'\n            and values['input_definition'] != 'LABEL']\n\nreturn_dict_type(cat_vars[0])\n\n{'destinationgeoafinitylabel': {'transformation': {'name': 'OrdinalEncoder',\n   'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}},\n  'variable_type': 'cat'}}\n\n\n\nsource\n\n\ncreate_sklearn_preprocess_baseline_dict\n\n create_sklearn_preprocess_baseline_dict (cat_vars:list, cont_vars:list)\n\nwrapper around [return_dict_type](https://JeremyDemlow.github.io/LTBP/model_utilities.html#return_dict_type) to go through cat and cont vars\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncat_vars\nlist\nlist of categorical variables with sklearn transformer\n\n\ncont_vars\nlist\nlist of continous variables with sklearn transformer\n\n\n\n\nfeatures=yaml.yaml_reader('./LTBP/files/yaml_files/features.yaml')\nexperiment_name='BASELINE'\n\ncat_vars =[{f.lower() : values['transformation'][experiment_name]} for f, values in features.items() \n            if values['var_type'][experiment_name] == 'cat'\n            and values['input_definition'] != 'LABEL']\ncont_vars =[{f.lower(): values['transformation'][experiment_name]} for f, values in features.items() \n            if values['var_type'][experiment_name] == 'cont'\n            and values['input_definition'] != 'LABEL']\n\nfeature_dict = create_sklearn_preprocess_baseline_dict(cat_vars=cat_vars, \n                                                       cont_vars=cont_vars)\nlogging.info(feature_dict)\n\nINFO:root:{'destinationgeoafinitylabel': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'evercorepass': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'everpass': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'gendercode': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'guestbehavior': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'isepicmixactivated': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'marketingzone': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'mostcommonticketcomp': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'mostsubseasonvisited': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'mostvisitedregion': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'mostvisitedresort': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'onlysingleresortkey': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'partnerresortscannerflag': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'skierabilitylabel': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'totalseasonsscanned': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'visitmostinpeak': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'age': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'avgvisitperseason': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'resortsvisited': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'subseasonsperyear': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'totalvisits': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}}\n\n\n\nsource\n\n\nreturn_list_of_vars\n\n return_list_of_vars (variables)\n\nreturns lists key\n\ncat_vars = return_list_of_vars(cat_vars)\ncont_vars = return_list_of_vars(cont_vars)\nlogging.info(f'categorical variables: \\n {cat_vars}')\nlogging.info(f'continous variables: \\n {cont_vars}')\n\nINFO:root:categorical variables: \n ['destinationgeoafinitylabel', 'evercorepass', 'everpass', 'gendercode', 'guestbehavior', 'isepicmixactivated', 'marketingzone', 'mostcommonticketcomp', 'mostsubseasonvisited', 'mostvisitedregion', 'mostvisitedresort', 'onlysingleresortkey', 'partnerresortscannerflag', 'skierabilitylabel', 'totalseasonsscanned', 'visitmostinpeak']\nINFO:root:continous variables: \n ['age', 'avgvisitperseason', 'resortsvisited', 'subseasonsperyear', 'totalvisits']\n\n\n\nsource\n\n\nprepare_training_set\n\n prepare_training_set (df:pandas.core.frame.DataFrame, y_var:list,\n                       y_scaler_type:object, sklearn_pipe:object,\n                       etl_dict:dict, models_dict:dict, adls_path:str,\n                       experiment_name:str, connection_str:str,\n                       identifiers:list=['ECID'], test_set:bool=True,\n                       validation_split:float=0.2, test_split:float=0.15,\n                       seed:int=1320, as_type=<class 'int'>)\n\nTODO: Working on Multi-Col Labels split and preprocess data set for model training purposes\n\n# scaler_type = None\n# test_set=True\n# experiment_name='BASELINE'\n# sklearn_pipe=pipe\n# etl=etl\n# models=models\n\n# adls_path = os.path.join((os.path.join(etl['data_lake_path'], 'experiments', experiment_name)\n#     if experiment \n#     else os.path.join(etl_dict['data_lake_path'], \n#     os.environ.get('CI_COMMIT_SHA', 'LocalRunNBS')))\n#     , models['preprocessors_adls_path'])\n# result = prepare_training_set(df,\n#                               y_var=[k.upper() for k, v in features.items() if v['input_definition'] == 'LABEL'],\n#                               y_scaler_type=models[experiment_name]['y_scaler_type'],\n#                               adls_path=adls_path,\n#                               sklearn_pipe=pipe,\n#                               test_set=True,\n#                               etl_dict=etl,\n#                               models_dict=models,\n#                               connection_str=os.environ[models[\"connection_str\"]],\n#                               identifiers=['ECID']\n#                               )\n# X_train, X_valid, X_test, y_train, y_valid, y_test, sklearn_pipe, scaler, id_list = result\n\nThis one needs a test, but as of right now holding off on this test as this test would take a little big more time than I want to spend on the documentation of this process at the current moment\nThe idea of this function is to ensure that the user is using the pre-processor in the correct fashion so that the validation set is not being considered in the pre-processing dictionary\n\nsource\n\n\npreprocess_data\n\n preprocess_data (X_train, X_valid, X_test, sklearn_pipe)\n\nsave_sklearn_object_to_data_lake\nThis function is simply wrapping DSU functionality together to allow for a model to be pushed to adls these tests are written and evaluated inside of DSU\n\nsource\n\n\nsave_sklearn_object_to_data_lake\n\n save_sklearn_object_to_data_lake (save_object, file_name, adls_path,\n                                   container_name, connection_str)\n\nmoves a sklearn object to azure data lake as a pickle file at a given path\nWill generate a test for this at a later time as LTBP doesn’t need this type of massaging\nThe y_var inside of LTBP isn’t a great use case, but RVF where we might want to scale the y_var in regression or time series using MinMaxScaler or StandardScaler this will give the flexibility needed\n\ndef y_var_scaler(y_train, y_valid, y_test, y_var, scaler_type):\n    \"\"\"Write Doc String\"\"\"\n    y_train = scaler_type.fit_transform(y_train.reset_index()[[y_var]])\n    y_train = pd.DataFrame(y_train)\n    y_train.columns = [y_var]\n    y_valid = scaler_type.transform(y_valid.reset_index()[[y_var]])\n    y_valid = pd.DataFrame(y_valid)\n    y_valid.columns = [y_var]\n    y_test = scaler_type.transform(y_test.reset_index()[[y_var]])\n    y_test = pd.DataFrame(y_test)\n    y_test.columns = [y_var]\n    return y_train, y_valid, y_test, scaler\n\n\nsource\n\n\ncreate_stage_and_query_stage_sf\n\n create_stage_and_query_stage_sf (sf, features:dict, etl:dict,\n                                  udf_inputs:dict, train_or_inference:str,\n                                  experiment_name:str,\n                                  indentification:list=['ECID'],\n                                  experiment:bool=True,\n                                  extra_statement:str=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsf\n\n\nSnowflake connection\n\n\nfeatures\ndict\n\ntemplate feature input expected format\n\n\netl\ndict\n\ntemplate etl input expected format\n\n\nudf_inputs\ndict\n\ntemplate udf input expected format\n\n\ntrain_or_inference\nstr\n\ntraining or inference\n\n\nexperiment_name\nstr\n\nname of experiment being ran\n\n\nindentification\nlist\n[‘ECID’]\nlist of identification defaults to ECID\n\n\nexperiment\nbool\nTrue\nBoolean fed to function from script to say if its an experiment\n\n\nextra_statement\nstr\nNone\ndefaults to None to allow for experimentation\n\n\n\n\nfrom LTBP.data.utils import get_yaml_dicts\n\n\nyaml_file_list = ['features.yaml', 'udf_inputs.yaml', 'etl.yaml', 'models.yaml']\nexperiment = False\nexperiment_name = 'BASELINE'\nindentification = ['ECID']\ntrain_or_inference = 'INFERENCE'\nextra_statement=None\n\nstage_url = f\"\"\"azure://{etl['azure_account']}.blob.core.windows.net/{\n        etl['azure_container']}/{etl['data_lake_path']}{\n        (os.path.join('experiments', experiment_name)\n        if experiment else os.path.join(os.getenv('CI_COMMIT_SHA', 'LocalRunTest'), experiment_name))}\"\"\".replace(' ', '')+'/'\nstage_query = make_stage_query_generator(\n        stage_name=etl[\"stage_name\"] + etl['FY_folder'] + os.environ.get('CI_COMMIT_SHA', 'LocalRunTest'),\n        url=stage_url,\n        sas_token=os.environ[\"DATALAKE_SAS_TOKEN_SECRET\"],\n        file_type=\"parquet\",\n    )\nsf = snowflake_query()\n_ = sf.run_sql_str(stage_query)\n# TODO: Figure out a identification feature like season year\n# Udf grain is ECID, which is easy to get, but season year isn't obivous some thought is needed\nindentification = indentification if indentification is not None else [col.split('.')[-1] for col in udf_inputs[train_or_inference]['UDF_GRAIN']]\ncolumns = [col.upper() for col in features.keys()]\nquery = generate_data_lake_query(stage_name=(etl[\"stage_name\"]\n                                             + etl['FY_folder']\n                                             + os.environ.get('CI_COMMIT_SHA', 'LocalRunTest')),\n                                 stage_path=train_or_inference.lower()+'_data/',\n                                 columns=indentification + columns,\n                                 extra_statement=extra_statement)\nlogging.info(f'adls snowflake stage query {query}')\ndf = sf.run_sql_str(query)\nlogging.info(f'Preview dataframe queried {df.head()}')\n\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/BASELINE/'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/inference_data/\n    None\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\nKeyboardInterrupt:"
  },
  {
    "objectID": "inference_utilities.html",
    "href": "inference_utilities.html",
    "title": "Inference Utils",
    "section": "",
    "text": "source\n\npull_sklearn_object_from_adls\n\n pull_sklearn_object_from_adls (adls_path:str, file_name:str,\n                                container_name:str, connection_str:str,\n                                drop_local_path:str='.',\n                                clean_up:bool=True)\n\npulls a pickeld sklearn object from azure data lake to memory\nArgs: file_name (str): name of file path (str): data lake path container (str): data lake container connection_str (str): azure connection string for the account\nReturns: (sklearn object): sklearn object loaded from azure\nThis is the DSDE standard process for using Xboost with hyperopt\n\nsource\n\n\nprediction_to_adls_and_sf\n\n prediction_to_adls_and_sf (df, sk_model_pipe, adls_path:str,\n                            models_dict:dict, etl_dict:dict,\n                            experiment_name:str, sfSchema='DEV')\n\nDEPERCATED WILL BREAK BACK custom to this project small changes to make it more flexible\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\n\n\npandas dataframe to infer on\n\n\nsk_model_pipe\n\n\nSklearn Pipeline that brings preprocessing and modeling to data\n\n\nadls_path\nstr\n\nadls root path\n\n\nmodels_dict\ndict\n\nmodel dict used through out the project classes would avoid this\n\n\netl_dict\ndict\n\netl dict used through the project\n\n\nexperiment_name\nstr\n\nname of experiment being ran\n\n\nsfSchema\nstr\nDEV\ndefaults to enviornment variable or default\n\n\n\n\nexperiment_name = 'BASELINE'\nexperiment = True\nyaml_file_list = ['features.yaml', 'udf_inputs.yaml', 'etl.yaml', 'models.yaml']\n\n\nfeatures, udf_inputs, etl_dict, models_dict = get_yaml_dicts(yaml_file_list)\n\nadls_path = os.path.join(\n    (os.path.join(etl_dict['data_lake_path'], 'experiments', experiment_name)\n      if experiment\n      else os.path.join(\n          etl_dict['data_lake_path'], os.environ.get('CI_COMMIT_SHA', 'LocalRunNBS'))))\n\nmodel_name = (models_dict[experiment_name]['model_trainer']+\n              os.environ.get('CI_COMMIT_SHA', 'LocalRunNBS')+\n              experiment_name+'.pkl'\n             )\n\nmodel = pull_sklearn_object_from_adls(\n        adls_path=os.path.join(adls_path,\n                               models_dict['modeling_adls_path'],\n                               models_dict[experiment_name]['model_trainer']\n                              ) + '/',\n        file_name=model_name,\n        drop_local_path='./models/',\n        container_name=etl_dict['azure_container'],\n        connection_str=os.environ[models_dict['connection_str']]\n    )\n\nsf = snowflake_query()\ndf_infer = create_stage_and_query_stage_sf(\n    sf=sf,\n    etl=etl_dict,\n    udf_inputs=udf_inputs,\n    train_or_inference='INFERENCE',\n    experiment_name=experiment_name,\n    experiment=experiment,\n    indentification=models_dict['identification'],\n    extra_statement='LIMIT 1000'\n)\nlogging.info(f'size of test set {df_infer.shape}')\nlogging.info(f'Preview inference data:\\n{df_infer.head(2)}')\nlogging.info(f'Preview inference data values:\\n{df_infer.iloc[0].values}')\n\nlogging.info('Begining on inference upload process')\nprediction_to_adls_and_sf(\n    df=df_infer,\n    sk_model_pipe=model,\n    adls_path=adls_path,\n    models_dict=models_dict,\n    etl_dict=etl_dict,\n    experiment_name=experiment_name,\n    sfSchema=os.getenv(\"sfSchema\", \"DEV\")\n)\nlogging.info(f'Inference stage complete for {experiment_name}')\n\nINFO:root:Loading Sklearn Object to: ./models/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Downloading projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb/train_xgbLocalRunTestBASELINE.pkl to ./models/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Download complete\nINFO:root:Sklearn Object Loaded\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/BASELINE'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.quidenfication to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/inference_data/\n    LIMIT 1000\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR AGE AVGVISITPERSEASON BOUGHTPASS  \\\n0   4274289    2021/22  33                 0          0   \n1  83442101    2021/22  40                 0          0   \n2   7327662    2021/22  17                 0          0   \n3   6579493    2021/22  63                 0          0   \n4  59180198    2021/22  35                 0          0   \n\n  DESTINATIONGEOAFINITYLABEL EVERCOREPASS EVERPASS GENDERCODE GUESTBEHAVIOR  \\\n0                Destination            0        0          M   Lapsed Paid   \n1                      Local            0        0          F   Lapsed Paid   \n2                Destination            0        0          M   Lapsed Paid   \n3                Destination            0        0          F   Lapsed Paid   \n4                Destination            0        0          F   Lapsed Paid   \n\n   ... MOSTVISITEDREGION MOSTVISITEDRESORT ONLYSINGLERESORTKEY  \\\n0  ...              None              None                None   \n1  ...              None              None                None   \n2  ...              None              None                None   \n3  ...              None              None                None   \n4  ...              None              None                None   \n\n  PARTNERRESORTSCANNERFLAG RESORTSVISITED SKIERABILITYLABEL SUBSEASONSPERYEAR  \\\n0                        0              0              None              None   \n1                        0              0              None              None   \n2                        0              0              None              None   \n3                        0              0              None              None   \n4                        0              0              None              None   \n\n  TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK  \n0                   0           0               0  \n1                   0           0               0  \n2                   0           0               0  \n3                   0           0               0  \n4                   0           0               0  \n\n[5 rows x 24 columns]\nINFO:root:size of test set (1000, 24)\nINFO:root:Preview inference data:\n       ECID SEASONYEAR AGE AVGVISITPERSEASON BOUGHTPASS  \\\n0   4274289    2021/22  33                 0          0   \n1  83442101    2021/22  40                 0          0   \n\n  DESTINATIONGEOAFINITYLABEL EVERCOREPASS EVERPASS GENDERCODE GUESTBEHAVIOR  \\\n0                Destination            0        0          M   Lapsed Paid   \n1                      Local            0        0          F   Lapsed Paid   \n\n   ... MOSTVISITEDREGION MOSTVISITEDRESORT ONLYSINGLERESORTKEY  \\\n0  ...              None              None                None   \n1  ...              None              None                None   \n\n  PARTNERRESORTSCANNERFLAG RESORTSVISITED SKIERABILITYLABEL SUBSEASONSPERYEAR  \\\n0                        0              0              None              None   \n1                        0              0              None              None   \n\n  TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK  \n0                   0           0               0  \n1                   0           0               0  \n\n[2 rows x 24 columns]\nINFO:root:Preview inference data values:\n['4274289' '2021/22' '33' '0' '0' 'Destination' '0' '0' 'M' 'Lapsed Paid'\n None None None None None None None '0' '0' None None '0' '0' '0']\nINFO:root:Begining on inference upload process\nINFO:root:preview predictions being added:\n       ECID SEASONYEAR  PROBABILITY CI_COMMIT_SHA         DATE_CREATED  \\\n0   4274289    2021/22     0.191546  LocalRunTest  2022-11-03 15:17:48   \n1  83442101    2021/22     0.180928  LocalRunTest  2022-11-03 15:17:48   \n2   7327662    2021/22     0.193184  LocalRunTest  2022-11-03 15:17:48   \n\n  EXPERIMENT  \n0   BASELINE  \n1   BASELINE  \n2   BASELINE  \nINFO:root:preview predictions values addes:\n['4274289' '2021/22' 0.19154589 'LocalRunTest' '2022-11-03 15:17:48'\n 'BASELINE']\nINFO:root:preview predictions being added columns:\nIndex(['ECID', 'SEASONYEAR', 'PROBABILITY', 'CI_COMMIT_SHA', 'DATE_CREATED',\n       'EXPERIMENT'],\n      dtype='object')\nINFO:data_system_utilities.azure.storage:Uploading predictions_LocalRunTestBASELINE.csv, to Azure Storage projects/LTBP/FY23/experiments/BASELINE/predictions/train_xgb/predictions_LocalRunTestBASELINE.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Pushing Forecasted Season from ADLS to Snowflake\nINFO:data_system_utilities.snowflake.copyinto:\ncopy into MACHINELEARNINGOUTPUTS.DEV.LTBP_PREDICTIONS_FY23\nfrom 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/BASELINE/predictions/train_xgb/predictions_LocalRunTestBASELINE.csv'\nfile_format = (type = csv     skip_header = 1)\ncredentials= (azure_sas_token = '?sv=2019-12-12&ss=bfqt&srt=sco&sp=rwdlacupx&se=2031-01-22T06:17:14Z&st=2021-01-21T22:17:14Z&spr=https&sig=kIHogByJjyVWyL6XupA0CBUB1iw12%2FeXWFQiOj5fB5c%3D')\npattern = '.*.csv';\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:preview of queried table being added:\n       ECID SEASONYEAR  PROBABILITY CI_COMMIT_SHA         DATE_CREATED  \\\n0   4274289    2021/22     0.191546  LocalRunTest  2022-11-03 15:17:48   \n1  83442101    2021/22     0.180928  LocalRunTest  2022-11-03 15:17:48   \n2   7327662    2021/22     0.193184  LocalRunTest  2022-11-03 15:17:48   \n\n  EXPERIMENT  \n0   BASELINE  \n1   BASELINE  \n2   BASELINE  \nINFO:root:preview predictions values addes:\n['4274289' '2021/22' 0.19154589 'LocalRunTest' '2022-11-03 15:17:48'\n 'BASELINE']\nINFO:root:Inference stage complete for BASELINE\n\n\n\n# sf.run_sql_str(f\"DROP TABLE {models_dict['tracking_table']}\")\n# sf.run_sql_str(f\"DROP TABLE MACHINELEARNINGOUTPUTS.dev.{models_dict['hold_out_table']}\")\n# sf.run_sql_str(f\"DROP TABLE MACHINELEARNINGOUTPUTS.dev.{table_name}\")"
  },
  {
    "objectID": "calling_library_cli.html",
    "href": "calling_library_cli.html",
    "title": "Use Your CLI Commands",
    "section": "",
    "text": "# This model has been going for a long time we only use 3 years of data but this is a legacy project being moved over\nseason_year=['2017/18', '2018/19', '2019/20', '2020/21', '2021/22']\n# Changing these to the season end years so that we don't get confused what year the data is for\nseasons=['17_18', '18_19', '19_20', '20_21', '21_22']\nfor sy, s in zip(season_year, seasons):\n    with open(Path('./LTBP/files/sql_files/', f'training_ecids_{s}.sql'), 'w') as f:\n        f.write(f\"\"\"select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('{sy}')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n\"\"\")\n\n\n\n\nThis is described in depth inside of the Data_Preparation_Example.ipynb\n\nfeature_dict = {\n    'GenderCode':\n        {\n        'feature_type': 'STATIC',\n        'input_type': None,\n        'input_definition': 'FEATURE',\n        'udf_name': 'GenderCode',\n        'var_type': {\n            'BASELINE': 'cat' ,\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'DESTINATIONGEOAFINITYLABEL':\n        {\n        'feature_type': 'STATIC',\n        'input_type': None,\n        'input_definition': 'FEATURE',\n        'udf_name': 'DESTINATIONGEOAFINITYLABEL',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n        # Issue with temporal element eventual switch back\n        # glv issue spotted and snowpark fixes it\n    'MarketingZone':\n        {\n        'feature_type': 'STATIC',\n        'input_type': None,\n        'input_definition': 'FEATURE',\n        'udf_name': 'MarketingZone',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'Age':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'Age_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cont',\n            'NOHYPEROPT': 'cont'\n        },\n        'transformation': {\n            'BASELINE': 'StandardScaler',\n            'NOHYPEROPT': 'StandardScaler'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'EverCorePass':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'EverCorePass_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'EverPass':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'EverPass_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'OnlySingleResortKey':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'OnlySingleResortKey_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'PartnerResortScannerFlag':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'PartnerResortScannerFlag_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'TotalSeasonsScanned':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'TotalSeasonsScanned_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'ResortsVisited':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'ResortsVisited_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cont',\n            'NOHYPEROPT': 'cont'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'SubSeasonsPerYear':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'SubSeasonsPerYear_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cont',\n            'NOHYPEROPT': 'cont'\n        },\n        'transformation': {\n            'BASELINE': 'StandardScaler',\n            'NOHYPEROPT': 'StandardScaler'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'MostCommonTicketComp':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'MostCommonTicketComp_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'AvgVisitPerSeason':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'AvgVisitPerSeason_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cont',\n            'NOHYPEROPT': 'cont'\n        },\n        'transformation': {\n            'BASELINE': 'StandardScaler',\n            'NOHYPEROPT': 'StandardScaler'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'MostSubSeasonVisited':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'MostSubSeasonVisited_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'TotalVisits':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'TotalVisits_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cont',\n            'NOHYPEROPT': 'cont'\n        },\n        'transformation': {\n            'BASELINE': 'StandardScaler',\n            'NOHYPEROPT': 'StandardScaler'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'VisitMostInPeak':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'VisitMostInPeak_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'MostVisitedRegion':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'MostVisitedRegion_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'MostVisitedResort':\n        {\n        'feature_type': 'TEMP',\n        'input_type': '3_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'MostVisitedResort_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'IsEpicMixActivated':\n        {\n        'feature_type': 'TEMP',\n        'input_type': 'SEASONYEAR',\n        'input_definition': 'FEATURE',\n        'udf_name': 'IsEpicMixActivated_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'MarketingZone':\n        {\n        'feature_type': 'TEMP',\n        'input_type': 'SEASONYEAR',\n        'input_definition': 'FEATURE',\n        'udf_name': 'MarketingZone_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'SkierabilityLabel':\n        {\n        'feature_type': 'TEMP',\n        'input_type': 'SEASONYEAR',\n        'input_definition': 'FEATURE',\n        'udf_name': 'SkierabilityLabel_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'GuestBehavior':\n        {\n        'feature_type': 'TEMP',\n        'input_type': 'SEASONYEAR',\n        'input_definition': 'FEATURE',\n        'udf_name': 'GuestBehavior_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'EverCorePass':\n        {\n        'feature_type': 'TEMP',\n        'input_type': 'ORIGIN_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'EverCorePass_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'EverPass':\n        {\n        'feature_type': 'TEMP',\n        'input_type': 'ORIGIN_YEAR_DATE_RANGE',\n        'input_definition': 'FEATURE',\n        'udf_name': 'EverPass_ECID_Temporal',\n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation': {\n            'BASELINE': 'OrdinalEncoder',\n            'NOHYPEROPT': 'OrdinalEncoder'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n    'BoughtPass': \n        {\n        'feature_type': 'TEMP',\n        'input_type': 'SEASONYEAR',\n        'input_definition': 'LABEL',\n        'udf_name': 'BoughtPass_ECID_Temporal', \n        'var_type': {\n            'BASELINE': 'cat',\n            'NOHYPEROPT': 'cat'\n        },\n        'transformation' : {\n            'BASELINE': None,\n            'NOHYPEROPT': 'None'\n        },\n        'experiment_list': ['BASELINE', 'NOHYPEROPT']\n        },\n}\n\nwrite_yaml_file('./LTBP/files/yaml_files/', 'features.yaml', feature_dict)\n\n\n\n\nThis is described in depth inside of the Data_Preparation_Example.ipynb\n\nudf_inputs = {\n    'TRAINING': {\n        # TODO: PR to remove this duplication\n        'UDF_GRAIN' : ['base.ECID'], # input key to all udfs\n        'FEATURE':{\n            'BASELINE' : {\n                'SEASON_END':{\n                    0 : '20181005',\n                    1 : '20191005',\n                    2 : '20201005',\n                },\n                '3_YEAR_DATE_RANGE':{\n                    0 : ['20171001', '20191005'],\n                    1 : ['20181001', '20201005'],\n                    2 : ['20191001', '20211005'],\n                },\n            'SEASONYEAR':{\n                    0 :  \"\\'2017/18\\'\",\n                    1 :  \"\\'2018/19\\'\",\n                    2 :  \"\\'2019/20\\'\",\n                },\n                'ORIGIN_YEAR_DATE_RANGE':{\n                    0 : ['20151005', '20191005'],\n                    1 : ['20151005', '20201005'],\n                    2 : ['20151005', '20211005'],\n                },\n            },\n        'NOHYPEROPT' : {\n                'SEASON_END':{\n                    0 : '20181005',\n                    1 : '20191005',\n                    2 : '20201005',\n                },\n                '3_YEAR_DATE_RANGE':{\n                    0 : ['20171001', '20191005'],\n                    1 : ['20181001', '20201005'],\n                    2 : ['20191001', '20211005'],\n                },\n            'SEASONYEAR':{\n                    0 :  \"\\'2017/18\\'\",\n                    1 :  \"\\'2018/19\\'\",\n                    2 :  \"\\'2019/20\\'\",\n                },\n                'ORIGIN_YEAR_DATE_RANGE':{\n                    0 : ['20151005', '20191005'],\n                    1 : ['20151005', '20201005'],\n                    2 : ['20151005', '20211005'],\n                },\n            },\n        },\n        'LABEL' : {\n            'BASELINE' : {\n                 'SEASONYEAR': {\n                    0 :  \"\\'2019/20\\'\",\n                    1 :  \"\\'2020/21\\'\",\n                    2 :  \"\\'2021/22\\'\",\n                    }\n            },\n            'NOHYPEROPT' : {\n                 'SEASONYEAR': {\n                    0 :  \"\\'2019/20\\'\",\n                    1 :  \"\\'2020/21\\'\",\n                    2 :  \"\\'2021/22\\'\",\n                    }\n            },\n        },\n        'BASE_QUERY': {\n            'BASELINE' : {\n                0 : 'training_ecids_18_19.sql',\n                1 : 'training_ecids_19_20.sql',\n                2 : 'training_ecids_20_21.sql',\n                },\n            'NOHYPEROPT' : {\n                0 : 'training_ecids_18_19.sql',\n                1 : 'training_ecids_19_20.sql',\n                2 : 'training_ecids_20_21.sql',\n                },\n        },\n        'ADDITIONAL_COLUMNS': {\n            'SEASONYEAR': {\n                0: \"'2018/19'\",\n                1: \"'2019/20'\",\n                2: \"'2020/21'\"\n            },\n        }\n    },\n    'INFERENCE': {\n     'UDF_GRAIN' : ['base.ECID'], # input key to all udfs\n     'FEATURE':{\n         'BASELINE' : { \n             'SEASON_END': {    \n                     0 : '20221005',\n                },\n            '3_YEAR_DATE_RANGE': {\n                     0 : ['20190101', '20221005'],\n                },\n            'SEASONYEAR': {\n                    0 :  \"\\'2021/22\\'\",\n                },\n            'ORIGIN_YEAR_DATE_RANGE': { \n                    0 : ['20051001', '20221005'],\n                },\n            },\n        'NOHYPEROPT' : { \n             'SEASON_END': {    \n                     0 : '20221005',\n                },\n            '3_YEAR_DATE_RANGE': {\n                     0 : ['20190101', '20221005'],\n                },\n            'SEASONYEAR': {\n                    0 :  \"\\'2021/22\\'\",\n                },\n            'ORIGIN_YEAR_DATE_RANGE': { \n                    0 : ['20051001', '20221005'],\n                },\n            },\n         },\n    'LABEL' : {\n        'BASELINE' : {\n            'SEASONYEAR' : {\n                0 :  \"\\'2021/22\\'\",\n            }\n        },\n        'NOHYPEROPT' : {\n            'SEASONYEAR' : {\n                0 :  \"\\'2021/22\\'\",\n            }\n        },\n    },\n    'BASE_QUERY': {\n        'BASELINE' : {\n            0 : 'inference_base.sql'\n            },\n        'NOHYPEROPT' : {\n            0 : 'inference_base.sql'\n            }\n        },\n    'ADDITIONAL_COLUMNS': {\n            'SEASONYEAR': {\n                0: \"'2021/22'\",\n            },\n        }\n    }\n}\n\nwrite_yaml_file('./LTBP/files/yaml_files/', 'udf_inputs.yaml', udf_inputs)\n\n\n\n\n\netl = dict({\n 'azure_account': 'vaildtscadls',\n 'azure_container': 'vailadls',\n 'data_lake_path': 'projects/LTBP/FY23/',\n 'max_file_size': '32000000',\n 'over_write': 'True',\n 'query_file_path': 'sql_files/',\n 'stage_name': 'ltbp',\n 'FY_folder' : 'FY23',\n 'extra_statement' : {\n    'TRAINING': None,\n    'INFERENCE': None\n }\n})\n\nwrite_yaml_file('./LTBP/files/yaml_files/', 'etl.yaml', etl)\n\n\n\n\nGlobal Use\n\npreprocessors_adls_path\n\nvalue: ‘preprocessors/’\npurpose: this is where in adls your preprocessors will be sent with an additional level using the experiment model_trainer (i.e. preprocessor/train_xgb/)\n\nmodeling_adls_path\n\nvalue: ‘modeling/’\npurpose: this is where in adls your models will be sent with an additional level using the experiment model_trainer (i.e. modeling/train_xgb/)\n\npredictions_adls_path\n\nvalue: ‘predictions/’\npurpose: this is where in adls your model prediction file will be sent with an additional level using the experiment model_trainer (i.e. modeling/train_xgb/)\n\nconnection_str\n\nvalue: ‘DATALAKE_CONN_STR_SECRET’\npurpose: n/a\n\nsas_token\n\nvalue: ‘DATALAKE_SAS_TOKEN_SECRET’\npurpose: n/a\n\nhold_out_table\n\nvalue: ‘LTBP_HOLDOUT_TEST_MODEL_RESULTS’\npurpose: this example uses a test set, but if you don’t have one then the validation set will be sent to this location with the identification columns with your custom send_holdout_results_to_sf\n\ntracking_table\n\nvalue: ‘LTBP_MODEL_TRACKING_FY23’\npurpose: this is the name of the project log from msu will send your information for this run.\n\nidentification\n\nvalue: [‘ECID’, ‘SEASONYEAR’]\npurpose: these columns will make it to your hold out set as well as your inference table to help with identification to a correct lable.\n\ninference_sf_table_name\n\nvalue: ‘LTBP_PREDICTIONS_FY23’\npurpose: the inference table name that will be created\n\n\nInside Experiment\nAs of right now to keep this going it expect that you have the hyper opt options there even if you don’t use it in your current model you can see that in this example they are set to None for things that aren’t relevant to your current model. This process will be improved upon as we iterate.\n\nmodel_trainer: is the function inside of models.py that is going to be used for inference\n\n\nmodels_dict = dict({\n    'preprocessors_adls_path' : 'preprocessors/',\n    'modeling_adls_path' : 'modeling/',\n    'predictions_adls_path': 'predictions/',\n    'connection_str': 'DATALAKE_CONN_STR_SECRET',\n    'sas_token' : 'DATALAKE_SAS_TOKEN_SECRET',\n    'hold_out_table' : 'LTBP_HOLDOUT_TEST_MODEL_RESULTS',\n    'tracking_table' : 'LTBP_MODEL_TRACKING_FY23',\n    'identification': ['ECID', 'SEASONYEAR'],\n    'inference_sf_table_name': 'LTBP_PREDICTIONS_FY23',\n    'BASELINE': {\n        'description': 'Standard baseline xgb_hyperopt approach status quo of LTBP of the past',\n        'model_trainer': 'train_xgb',\n        'y_preprocess_object_name': None,\n        'y_scaler_type' : None,\n        'x_preprocess_object_name': 'standard_pipe.pickle',\n        'hyperopt_evals' : 2,\n        'hyper_opt_subsample_size': 2750000,\n        'training_subsample_size' : 5000000,\n\n    },\n    'NOHYPEROPT': {\n        'description': 'Only here to see if it works delete at some point xgb_fit_only',\n        'model_trainer': 'train_xgb_basic',\n        'y_preprocess_object_name': None,\n        'y_scaler_type' : None,\n        'x_preprocess_object_name': 'standard_pipe.pickle',\n        'hyper_opt_subsample_size' : '',\n        'hyperopt_evals' : '',\n        'training_subsample_size' : 5000000,\n    }\n})\n\nwrite_yaml_file('./LTBP/files/yaml_files/', 'models.yaml', models_dict)\n\n\n\n\nThe project yamls files are created and sent to the location below\n\n! ls ./LTBP/files/yaml_files/\n\netl.yaml        features.yaml   models.yaml     udf_inputs.yaml\n\n\n\n! ls ./LTBP/files/sql_files/\n\ninference_base.sql       training_ecids_18_19.sql training_ecids_20_21.sql\ntraining_ecids_17_18.sql training_ecids_19_20.sql training_ecids_21_22.sql"
  },
  {
    "objectID": "calling_library_cli.html#data-set-creation",
    "href": "calling_library_cli.html#data-set-creation",
    "title": "Use Your CLI Commands",
    "section": "Data Set Creation",
    "text": "Data Set Creation\nLets grab a training set for the BASELINE & NOHYPEROPT experiment this is where you might want to build functionality to allow the project to only create a new data source if the data is different, but that was a little more work than what was taken on here, but very much a possibility\n\n! data_creation  --train_or_inference \"TRAINING\" --experiment_name \"BASELINE\" --experiment\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:root:This is a experiment run\nINFO:root:Loading Yaml Files..\nINFO:root:Generating Feature Set Query\nINFO:root:static features in data set: \n ['DESTINATIONGEOAFINITYLABEL', 'GenderCode']\nINFO:root:temporal features in data set: \n ['Age', 'AvgVisitPerSeason', 'BoughtPass', 'EverCorePass', 'EverPass', 'GuestBehavior', 'IsEpicMixActivated', 'MarketingZone', 'MostCommonTicketComp', 'MostSubSeasonVisited', 'MostVisitedRegion', 'MostVisitedResort', 'OnlySingleResortKey', 'PartnerResortScannerFlag', 'ResortsVisited', 'SkierabilityLabel', 'SubSeasonsPerYear', 'TotalSeasonsScanned', 'TotalVisits', 'VisitMostInPeak']\nINFO:root:Appending static feature DESTINATIONGEOAFINITYLABEL to query\nINFO:root:Appending static feature GenderCode to query\nINFO:root:Finished appending static features\nINFO:root:reading training_ecids_18_19.sql for base query...\nINFO:root:reading training_ecids_19_20.sql for base query...\nINFO:root:reading training_ecids_20_21.sql for base query...\nINFO:root:final query output: \n select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20171001, 20191005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20171001, 20191005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2019/20') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20151005, 20191005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20151005, 20191005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2017/18') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2017/18') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2017/18') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20171001, 20191005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20171001, 20191005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20171001, 20191005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20171001, 20191005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20171001, 20191005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20171001, 20191005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20171001, 20191005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2017/18') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20171001, 20191005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20171001, 20191005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20171001, 20191005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20171001, 20191005) as VisitMostInPeak\n\n, '2018/19' as SEASONYEAR\nfrom\n(select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('2018/19')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid \nUNION ALL\nselect\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20181001, 20201005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20181001, 20201005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2020/21') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20151005, 20201005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20151005, 20201005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2018/19') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2018/19') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2018/19') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20181001, 20201005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20181001, 20201005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20181001, 20201005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20181001, 20201005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20181001, 20201005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20181001, 20201005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20181001, 20201005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2018/19') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20181001, 20201005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20181001, 20201005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20181001, 20201005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20181001, 20201005) as VisitMostInPeak\n\n, '2019/20' as SEASONYEAR\nfrom\n(select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('2019/20')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid \nUNION ALL\nselect\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20191001, 20211005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20191001, 20211005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20151005, 20211005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20151005, 20211005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2019/20') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2019/20') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2019/20') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20191001, 20211005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20191001, 20211005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20191001, 20211005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20191001, 20211005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20191001, 20211005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20191001, 20211005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20191001, 20211005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2019/20') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20191001, 20211005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20191001, 20211005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20191001, 20211005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20191001, 20211005) as VisitMostInPeak\n\n, '2020/21' as SEASONYEAR\nfrom\n(select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('2020/21')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid\nINFO:root:Checking projects/LTBP/FY23/experiments/NOHYPEROPT/training_data/ to either skip creation for experiment or create a production dataset\n\n\nINFO:data_system_utilities.azure.storage:number of files in container path recursively 0\nINFO:data_system_utilities.snowflake.copyinto:\nCOPY INTO 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/NOHYPEROPT/training_data/'\nFROM (select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20171001, 20191005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20171001, 20191005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2019/20') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20151005, 20191005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20151005, 20191005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2017/18') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2017/18') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2017/18') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20171001, 20191005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20171001, 20191005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20171001, 20191005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20171001, 20191005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20171001, 20191005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20171001, 20191005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20171001, 20191005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2017/18') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20171001, 20191005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20171001, 20191005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20171001, 20191005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20171001, 20191005) as VisitMostInPeak\n\n, '2018/19' as SEASONYEAR\nfrom\n(select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('2018/19')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid \nUNION ALL\nselect\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20181001, 20201005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20181001, 20201005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2020/21') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20151005, 20201005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20151005, 20201005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2018/19') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2018/19') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2018/19') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20181001, 20201005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20181001, 20201005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20181001, 20201005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20181001, 20201005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20181001, 20201005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20181001, 20201005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20181001, 20201005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2018/19') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20181001, 20201005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20181001, 20201005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20181001, 20201005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20181001, 20201005) as VisitMostInPeak\n\n, '2019/20' as SEASONYEAR\nfrom\n(select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('2019/20')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid \nUNION ALL\nselect\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20191001, 20211005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20191001, 20211005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20151005, 20211005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20151005, 20211005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2019/20') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2019/20') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2019/20') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20191001, 20211005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20191001, 20211005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20191001, 20211005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20191001, 20211005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20191001, 20211005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20191001, 20211005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20191001, 20211005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2019/20') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20191001, 20211005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20191001, 20211005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20191001, 20211005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20191001, 20211005) as VisitMostInPeak\n\n, '2020/21' as SEASONYEAR\nfrom\n(select\ndistinct fs.ECID as ecid,\ndd.SeasonYear as SeasonYear\nfrom BIDE_EDWDB_ARA_PROD.dbo.FactScan fs\nleft join BIDE_EDWDB_ARA_PROD.dbo.DimDateSeason dd\non dd.DateSeasonKey = fs.DateSeasonKey\nwhere\ndd.SeasonYear in ('2020/21')\nand fs.IsEmployee = 0\nand dd.Season = 'Winter'\nLIMIT 10000\n)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid)\n\nmax_file_size = 3200000\noverwrite = True\nfile_format = (type = parquet          )\ncredentials= (azure_sas_token = '**MASKED**')\nheader = True;\n\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:data has been delivered from sf to adls\n\n\n\n! data_creation  --train_or_inference \"TRAINING\" --experiment_name \"NOHYPEROPT\" --experiment\n\nLets now grab a inference/test set and place it into adls for the batch inference process\n\n! data_creation  --train_or_inference 'INFERENCE' --experiment_name 'BASELINE' --experiment\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:root:This is a experiment run\nINFO:root:Loading Yaml Files..\nINFO:root:Generating Feature Set Query\nINFO:root:static features in data set: \n ['DESTINATIONGEOAFINITYLABEL', 'GenderCode']\nINFO:root:temporal features in data set: \n ['Age', 'AvgVisitPerSeason', 'BoughtPass', 'EverCorePass', 'EverPass', 'GuestBehavior', 'IsEpicMixActivated', 'MarketingZone', 'MostCommonTicketComp', 'MostSubSeasonVisited', 'MostVisitedRegion', 'MostVisitedResort', 'OnlySingleResortKey', 'PartnerResortScannerFlag', 'ResortsVisited', 'SkierabilityLabel', 'SubSeasonsPerYear', 'TotalSeasonsScanned', 'TotalVisits', 'VisitMostInPeak']\nINFO:root:Appending static feature DESTINATIONGEOAFINITYLABEL to query\nINFO:root:Appending static feature GenderCode to query\nINFO:root:Finished appending static features\nINFO:root:reading inference_base.sql for base query...\nINFO:root:final query output: \n select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20190101, 20221005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20190101, 20221005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2021/22') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2021/22') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2021/22') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20190101, 20221005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20190101, 20221005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20190101, 20221005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2021/22') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20190101, 20221005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20190101, 20221005) as VisitMostInPeak\n\n, '2021/22' as SEASONYEAR\nfrom\n(-- base EDEE team guest behavior\n  with edee_base as (\n      SELECT \n            distinct ECID\n      from BIDE_EDWDB_CUSTOMERMART_PROD.DBO.CustomerPASSPURCHASEBEHAVIOR cla\n      where \n              cla.GuestPassPurchaseBehaviorDetailLabel <> 'Unknown'\n  ),\n\n  -- pass prospects not in guest behavior\n  prospects as (\n      Select\n            distinct ECID\n      from Vail_Reporting.Prod.GuestBehaviorBase\n      where \n              GuestBehavior = 'Prospect'\n          and salesseason = '2021/22'\n  ),\n\n  -- paid prospects not in guest behavior\n  other_scans as (\n      select\n            distinct a.ECID\n      from\n      (\n          select \n                distinct ECID\n              , SeasonYear\n          from \"BIDE_EDWDB_ARA_PROD\".\"DBO\".\"SCANDAY\"\n              where Season = 'Winter'\n      ) a\n      left join Vail_Reporting.Prod.GuestBehaviorBase b \n          on a.ECID = b.ECID and a.SeasonYear = b.SalesSeason\n      where \n              b.GuestBehavior is null\n          and a.seasonyear = '2021/22'\n  )\n\n  select\n        distinct ECID\n      , 'Inference Set' as SeasonYear\n  from\n  (\n      select\n            coalesce(base.ecid, pro.ecid, os.ecid) as ecid\n      from edee_base base\n      full outer join prospects pro\n          on pro.ecid = base.ecid\n      full outer join other_scans os\n          on os.ecid = base.ecid\n  ) a)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid\nINFO:root:Checking projects/LTBP/FY23/experiments/NOHYPEROPT/inference_data/ to either skip creation for experiment or create a production dataset\nINFO:data_system_utilities.azure.storage:number of files in container path recursively 0\nINFO:data_system_utilities.snowflake.copyinto:\nCOPY INTO 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/NOHYPEROPT/inference_data/'\nFROM (select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20190101, 20221005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20190101, 20221005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2021/22') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2021/22') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2021/22') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20190101, 20221005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20190101, 20221005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20190101, 20221005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2021/22') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20190101, 20221005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20190101, 20221005) as VisitMostInPeak\n\n, '2021/22' as SEASONYEAR\nfrom\n(-- base EDEE team guest behavior\n  with edee_base as (\n      SELECT \n            distinct ECID\n      from BIDE_EDWDB_CUSTOMERMART_PROD.DBO.CustomerPASSPURCHASEBEHAVIOR cla\n      where \n              cla.GuestPassPurchaseBehaviorDetailLabel <> 'Unknown'\n  ),\n\n  -- pass prospects not in guest behavior\n  prospects as (\n      Select\n            distinct ECID\n      from Vail_Reporting.Prod.GuestBehaviorBase\n      where \n              GuestBehavior = 'Prospect'\n          and salesseason = '2021/22'\n  ),\n\n  -- paid prospects not in guest behavior\n  other_scans as (\n      select\n            distinct a.ECID\n      from\n      (\n          select \n                distinct ECID\n              , SeasonYear\n          from \"BIDE_EDWDB_ARA_PROD\".\"DBO\".\"SCANDAY\"\n              where Season = 'Winter'\n      ) a\n      left join Vail_Reporting.Prod.GuestBehaviorBase b \n          on a.ECID = b.ECID and a.SeasonYear = b.SalesSeason\n      where \n              b.GuestBehavior is null\n          and a.seasonyear = '2021/22'\n  )\n\n  select\n        distinct ECID\n      , 'Inference Set' as SeasonYear\n  from\n  (\n      select\n            coalesce(base.ecid, pro.ecid, os.ecid) as ecid\n      from edee_base base\n      full outer join prospects pro\n          on pro.ecid = base.ecid\n      full outer join other_scans os\n          on os.ecid = base.ecid\n  ) a)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid)\n\nmax_file_size = 3200000\noverwrite = True\nfile_format = (type = parquet          )\ncredentials= (azure_sas_token = '**MASKED**')\nheader = True;\n\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:data has been delivered from sf to adls\n\n\n\n! data_creation  --train_or_inference 'INFERENCE' --experiment_name 'NOHYPEROPT' --experiment\n\n\nResults\nInside of the specified adls subscription described in the yaml files these first two steps create your data for your experiment or model run.\n\nprojects/LTBP/FY23/experiments/BASELINE/training_data/\nprojects/LTBP/FY23/experiments/BASELINE/inference_data/\n\n\nNote: experiments can be changed with CI_COMMIT_SHA depending on the methods approach that is being ran"
  },
  {
    "objectID": "calling_library_cli.html#train-model",
    "href": "calling_library_cli.html#train-model",
    "title": "Use Your CLI Commands",
    "section": "Train Model",
    "text": "Train Model\n\n! model_train --experiment_name 'BASELINE' --sfSchema 'dev' --test_set --experiment\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/BASELINE'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/training_data/\n    None\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR AGE  ... TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK\n0  13586157    2018/19  60  ...                   2         101               0\n1  53431921    2018/19  27  ...                   2          33               0\n2  81037617    2018/19  23  ...                   1          16               1\n3  84711794    2018/19  45  ...                   1           3               1\n4  81962958    2018/19  24  ...                   1          25               0\n\n[5 rows x 24 columns]\nINFO:root:{'DESTINATIONGEOAFINITYLABEL': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'EVERCOREPASS': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'EVERPASS': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'GENDERCODE': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'GUESTBEHAVIOR': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'ISEPICMIXACTIVATED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MARKETINGZONE': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTCOMMONTICKETCOMP': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTSUBSEASONVISITED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTVISITEDREGION': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTVISITEDRESORT': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'ONLYSINGLERESORTKEY': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'PARTNERRESORTSCANNERFLAG': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'SKIERABILITYLABEL': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'TOTALSEASONSSCANNED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'VISITMOSTINPEAK': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'AGE': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'AVGVISITPERSEASON': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'RESORTSVISITED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'SUBSEASONSPERYEAR': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'TOTALVISITS': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}}\nINFO:root:categorical variables: \n ['DESTINATIONGEOAFINITYLABEL', 'EVERCOREPASS', 'EVERPASS', 'GENDERCODE', 'GUESTBEHAVIOR', 'ISEPICMIXACTIVATED', 'MARKETINGZONE', 'MOSTCOMMONTICKETCOMP', 'MOSTSUBSEASONVISITED', 'MOSTVISITEDREGION', 'MOSTVISITEDRESORT', 'ONLYSINGLERESORTKEY', 'PARTNERRESORTSCANNERFLAG', 'SKIERABILITYLABEL', 'TOTALSEASONSSCANNED', 'VISITMOSTINPEAK']\nINFO:root:continous variables: \n ['AGE', 'AVGVISITPERSEASON', 'RESORTSVISITED', 'SUBSEASONSPERYEAR', 'TOTALVISITS']\nINFO:machine_learning_utilities.preprocessing:Creating Sklearn Preprocessing Pipeline\nINFO:machine_learning_utilities.preprocessing:Feature: DESTINATIONGEOAFINITYLABEL --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: EVERCOREPASS --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: EVERPASS --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: GENDERCODE --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: GUESTBEHAVIOR --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: ISEPICMIXACTIVATED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MARKETINGZONE --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTCOMMONTICKETCOMP --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTSUBSEASONVISITED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTVISITEDREGION --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTVISITEDRESORT --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: ONLYSINGLERESORTKEY --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: PARTNERRESORTSCANNERFLAG --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: SKIERABILITYLABEL --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: TOTALSEASONSSCANNED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: VISITMOSTINPEAK --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: AGE --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Feature: AVGVISITPERSEASON --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Feature: RESORTSVISITED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: SUBSEASONSPERYEAR --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Feature: TOTALVISITS --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Imputing missing data with mean strategy\n\n\nINFO:machine_learning_utilities.preprocessing:Preprocessing Pipeline Object:\nPipeline(steps=[('preprocessing',\n                 FeatureUnion(transformer_list=[('pipeline-1',\n                                                 Pipeline(steps=[('functiontransformer',\n                                                                  FunctionTransformer(func=<function get_cat_cols>,\n                                                                                      kw_args={'cols': ['DESTINATIONGEOAFINITYLABEL']})),\n                                                                 ('ordinalencoder',\n                                                                  OrdinalEncoder(handle_unknown='use_encoded_value',\n                                                                                 unknown_value=-1))])),\n                                                ('pipeline-2',\n                                                 Pipeline(steps=[('...\n                                                                  FunctionTransformer(func=<function get_cont_cols>,\n                                                                                      kw_args={'cols': ['SUBSEASONSPERYEAR']})),\n                                                                 ('standardscaler',\n                                                                  StandardScaler())])),\n                                                ('pipeline-21',\n                                                 Pipeline(steps=[('functiontransformer',\n                                                                  FunctionTransformer(func=<function get_cont_cols>,\n                                                                                      kw_args={'cols': ['TOTALVISITS']})),\n                                                                 ('standardscaler',\n                                                                  StandardScaler())]))])),\n                ('imputing', SimpleImputer())])\nINFO:root:Successfully Spilt Data\nTrain: (24000, 24), (24000, 1)\nValid: (5100, 24), (5100, 1)\nTest: (900, 24), (900, 1)\nINFO:root:Size of the id_list for the hold set (900, 2)\nINFO:root:This project relies on the query to have accurate labels with no preprocessing..\nINFO:root:Pushing Sklearn Object to Azure: projects/LTBP/FY23/experiments/BASELINE/preprocessors/train_xgb/LocalRunTeststandard_pipe.pickle\nINFO:data_system_utilities.azure.storage:Uploading LocalRunTeststandard_pipe.pickle, to Azure Storage projects/LTBP/FY23/experiments/BASELINE/preprocessors/train_xgb/LocalRunTeststandard_pipe.pickle\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:root:LocalRunTeststandard_pipe.pickle successfully pushed to projects/LTBP/FY23/experiments/BASELINE/preprocessors/train_xgb\nINFO:root:Hyper tuning on 24000 rows\n  0%|                                     | 0/2 [00:00<?, ?trial/s, best loss=?]INFO:hyperopt.tpe:build_posterior_wrapper took 0.008785 seconds\nINFO:hyperopt.tpe:TPE using 0 trials\n 50%|█████     | 1/2 [00:04<00:04,  4.29s/trial, best loss: 0.10091012817111322]INFO:hyperopt.tpe:build_posterior_wrapper took 0.007306 seconds\nINFO:hyperopt.tpe:TPE using 1/1 trials with best loss 0.100910\n100%|███████████| 2/2 [00:05<00:00,  2.85s/trial, best loss: 0.0966514288669098]\nINFO:root:Full training on 24000 rows\nINFO:root:Training Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.902    Accuracy: 0.827    Balanced Accuracy: 0.828\nINFO:root:Feature Importance df: \n                           COLS     IMP\n0                     EVERPASS  0.2268\n1         MOSTCOMMONTICKETCOMP  0.0176\n2            SUBSEASONSPERYEAR  0.0128\n3   DESTINATIONGEOAFINITYLABEL  0.0074\n4                GUESTBEHAVIOR  0.0042\n5                          AGE  0.0034\n6           ISEPICMIXACTIVATED  0.0028\n7          TOTALSEASONSSCANNED  0.0022\n8                 EVERCOREPASS  0.0006\n9          ONLYSINGLERESORTKEY  0.0006\n10                  GENDERCODE  0.0000\n11               MARKETINGZONE  0.0000\n12    PARTNERRESORTSCANNERFLAG  0.0000\n13             VISITMOSTINPEAK  0.0000\n14              RESORTSVISITED -0.0002\n15        MOSTSUBSEASONVISITED -0.0004\n16           MOSTVISITEDRESORT -0.0006\n17           MOSTVISITEDREGION -0.0006\n18           AVGVISITPERSEASON -0.0008\n19                 TOTALVISITS -0.0008\n20           SKIERABILITYLABEL -0.0016\nINFO:root:Validation Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.902    Accuracy: 0.834    Balanced Accuracy: 0.835\nINFO:root:Feature Importance df: \n                           COLS     IMP\n0                     EVERPASS  0.2218\n1         MOSTCOMMONTICKETCOMP  0.0166\n2            SUBSEASONSPERYEAR  0.0122\n3                GUESTBEHAVIOR  0.0080\n4                 EVERCOREPASS  0.0060\n5   DESTINATIONGEOAFINITYLABEL  0.0054\n6           ISEPICMIXACTIVATED  0.0044\n7                          AGE  0.0034\n8          TOTALSEASONSSCANNED  0.0022\n9            MOSTVISITEDREGION  0.0020\n10              RESORTSVISITED  0.0014\n11           SKIERABILITYLABEL  0.0012\n12               MARKETINGZONE  0.0008\n13                  GENDERCODE  0.0004\n14         ONLYSINGLERESORTKEY  0.0004\n15                 TOTALVISITS  0.0000\n16    PARTNERRESORTSCANNERFLAG -0.0002\n17        MOSTSUBSEASONVISITED -0.0002\n18           AVGVISITPERSEASON -0.0006\n19             VISITMOSTINPEAK -0.0012\n20           MOSTVISITEDRESORT -0.0022\nINFO:root:Test Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.888    Accuracy: 0.820    Balanced Accuracy: 0.823\nINFO:root:Feature Importance df: \n                           COLS       IMP\n0                     EVERPASS  0.210000\n1         MOSTCOMMONTICKETCOMP  0.024444\n2            SUBSEASONSPERYEAR  0.016667\n3                 EVERCOREPASS  0.006667\n4            MOSTVISITEDREGION  0.004444\n5   DESTINATIONGEOAFINITYLABEL  0.003333\n6                GUESTBEHAVIOR  0.002222\n7              VISITMOSTINPEAK  0.002222\n8               RESORTSVISITED  0.001111\n9          ONLYSINGLERESORTKEY  0.001111\n10           MOSTVISITEDRESORT  0.001111\n11    PARTNERRESORTSCANNERFLAG  0.000000\n12               MARKETINGZONE  0.000000\n13          ISEPICMIXACTIVATED  0.000000\n14                  GENDERCODE  0.000000\n15                 TOTALVISITS  0.000000\n16        MOSTSUBSEASONVISITED -0.001111\n17         TOTALSEASONSSCANNED -0.001111\n18           AVGVISITPERSEASON -0.001111\n19                         AGE -0.003333\n20           SKIERABILITYLABEL -0.004444\nINFO:root:hold out data preview going to snowflake            ECID SEASONYEAR  ...          DATECREATED      EXP_COMMIT_CI_SHA\n14448  28239825    2018/19  ...  2022-11-03 17:53:54  BASELINE_LocalRunTest\n12515  20142908    2018/19  ...  2022-11-03 17:53:54  BASELINE_LocalRunTest\n2167   12118124    2018/19  ...  2022-11-03 17:53:54  BASELINE_LocalRunTest\n\n[3 rows x 5 columns]\nINFO:data_system_utilities.snowflake.query:creating table LTBP_HOLDOUT_TEST_MODEL_RESULTS\nINFO:data_system_utilities.snowflake.query:sqlalchemy snowflake engine created\nINFO:data_system_utilities.snowflake.query:table created\nINFO:root:saving test prediction file\nINFO:root:sending prediction file to azure to projects/LTBP/FY23/experiments/BASELINE/holdout_results/train_xgb/\nINFO:data_system_utilities.azure.storage:Uploading holdout_BASELINELocalRunTest.csv, to Azure Storage projects/LTBP/FY23/experiments/BASELINE/holdout_results/train_xgb/holdout_BASELINELocalRunTest.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.query:creating table LTBP_MODEL_TRACKING_FY23\nINFO:data_system_utilities.snowflake.query:sqlalchemy snowflake engine created\nINFO:data_system_utilities.snowflake.query:table created\nINFO:root:project log preview:\n                                  ACTION_DESCRIPTION  ... EVER_PRODUCTION\n0  Standard baseline xgb_hyperopt approach status...  ...           False\n\n[1 rows x 12 columns]\nINFO:root:project log values preview:\n['Standard baseline xgb_hyperopt approach status quo of LTBP of the past'\n 'model_training' 'LocalRunTest' 'dev' 'random' '2022-11-03 17:53:58'\n '{\"azure_parent_folder\": \"projects/LTBP/FY23/experiments/BASELINE\"}'\n '{\"training_metrics\": {\"auc\": 0.9016874514791674, \"acc\": 0.826875, \"bacc\": 0.8283302060530875}, \"fi_train\": {\"EVERPASS\": 0.2268, \"MOSTCOMMONTICKETCOMP\": 0.01759999999999995, \"SUBSEASONSPERYEAR\": 0.012800000000000034, \"DESTINATIONGEOAFINITYLABEL\": 0.007399999999999962, \"GUESTBEHAVIOR\": 0.0041999999999999815, \"AGE\": 0.0033999999999999586, \"ISEPICMIXACTIVATED\": 0.0028000000000000247, \"TOTALSEASONSSCANNED\": 0.0021999999999999797, \"EVERCOREPASS\": 0.0005999999999999339, \"ONLYSINGLERESORTKEY\": 0.0005999999999999339}, \"valid_metrics\": {\"auc\": 0.9018520051783074, \"acc\": 0.8337254901960784, \"bacc\": 0.8351978400326507}, \"fi_valid\": {\"EVERPASS\": 0.2218, \"MOSTCOMMONTICKETCOMP\": 0.01660000000000006, \"SUBSEASONSPERYEAR\": 0.012199999999999989, \"GUESTBEHAVIOR\": 0.008000000000000007, \"EVERCOREPASS\": 0.006000000000000005, \"DESTINATIONGEOAFINITYLABEL\": 0.005400000000000071, \"ISEPICMIXACTIVATED\": 0.0044000000000000705, \"AGE\": 0.0034000000000000696, \"TOTALSEASONSSCANNED\": 0.0021999999999999797, \"MOSTVISITEDREGION\": 0.0020000000000000018}, \"test_metrics\": {\"auc\": 0.8879931109230473, \"acc\": 0.82, \"bacc\": 0.8226211156147463}, \"fi_test\": {\"EVERPASS\": 0.20999999999999996, \"MOSTCOMMONTICKETCOMP\": 0.02444444444444438, \"SUBSEASONSPERYEAR\": 0.016666666666666607, \"EVERCOREPASS\": 0.006666666666666599, \"MOSTVISITEDREGION\": 0.004444444444444362, \"DESTINATIONGEOAFINITYLABEL\": 0.0033333333333332993, \"GUESTBEHAVIOR\": 0.0022222222222221255, \"VISITMOSTINPEAK\": 0.0022222222222221255, \"RESORTSVISITED\": 0.0011111111111110628, \"ONLYSINGLERESORTKEY\": 0.0011111111111110628}}'\n 'BASELINE' True False False]\nINFO:root:Saving model and sending it to adls\nINFO:root:Pushing Sklearn Object to Azure: projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Uploading train_xgbLocalRunTestBASELINE.pkl, to Azure Storage projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb/train_xgbLocalRunTestBASELINE.pkl\n\n\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:root:train_xgbLocalRunTestBASELINE.pkl successfully pushed to projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb\n\n\n\n! model_train --experiment_name 'NOHYPEROPT' --sfSchema 'dev' --test_set --experiment\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/NOHYPEROPT'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/training_data/\n    None\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR AGE  ... TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK\n0  84750106    2018/19  17  ...                   1           4               0\n1  22890858    2018/19  11  ...                   2          36               1\n2  11086706    2018/19  51  ...                   2          26               0\n3  41200213    2018/19  33  ...                   2           6               1\n4  63937342    2018/19  63  ...                   2          34               1\n\n[5 rows x 24 columns]\nINFO:root:{'DESTINATIONGEOAFINITYLABEL': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'EVERCOREPASS': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'EVERPASS': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'GENDERCODE': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'GUESTBEHAVIOR': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'ISEPICMIXACTIVATED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MARKETINGZONE': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTCOMMONTICKETCOMP': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTSUBSEASONVISITED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTVISITEDREGION': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'MOSTVISITEDRESORT': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'ONLYSINGLERESORTKEY': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'PARTNERRESORTSCANNERFLAG': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'SKIERABILITYLABEL': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'TOTALSEASONSSCANNED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'VISITMOSTINPEAK': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'AGE': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'AVGVISITPERSEASON': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'RESORTSVISITED': {'transformation': {'name': 'OrdinalEncoder', 'args': {'handle_unknown': 'use_encoded_value', 'unknown_value': -1}}, 'variable_type': 'cat'}, 'SUBSEASONSPERYEAR': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}, 'TOTALVISITS': {'transformation': {'name': 'StandardScaler', 'args': {}}, 'variable_type': 'cont'}}\nINFO:root:categorical variables: \n ['DESTINATIONGEOAFINITYLABEL', 'EVERCOREPASS', 'EVERPASS', 'GENDERCODE', 'GUESTBEHAVIOR', 'ISEPICMIXACTIVATED', 'MARKETINGZONE', 'MOSTCOMMONTICKETCOMP', 'MOSTSUBSEASONVISITED', 'MOSTVISITEDREGION', 'MOSTVISITEDRESORT', 'ONLYSINGLERESORTKEY', 'PARTNERRESORTSCANNERFLAG', 'SKIERABILITYLABEL', 'TOTALSEASONSSCANNED', 'VISITMOSTINPEAK']\nINFO:root:continous variables: \n ['AGE', 'AVGVISITPERSEASON', 'RESORTSVISITED', 'SUBSEASONSPERYEAR', 'TOTALVISITS']\nINFO:machine_learning_utilities.preprocessing:Creating Sklearn Preprocessing Pipeline\nINFO:machine_learning_utilities.preprocessing:Feature: DESTINATIONGEOAFINITYLABEL --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: EVERCOREPASS --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: EVERPASS --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: GENDERCODE --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: GUESTBEHAVIOR --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: ISEPICMIXACTIVATED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MARKETINGZONE --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTCOMMONTICKETCOMP --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTSUBSEASONVISITED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTVISITEDREGION --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: MOSTVISITEDRESORT --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: ONLYSINGLERESORTKEY --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: PARTNERRESORTSCANNERFLAG --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: SKIERABILITYLABEL --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: TOTALSEASONSSCANNED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: VISITMOSTINPEAK --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: AGE --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Feature: AVGVISITPERSEASON --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Feature: RESORTSVISITED --> Transformer: OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nINFO:machine_learning_utilities.preprocessing:Feature: SUBSEASONSPERYEAR --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Feature: TOTALVISITS --> Transformer: StandardScaler()\nINFO:machine_learning_utilities.preprocessing:Imputing missing data with mean strategy\n\n\nINFO:machine_learning_utilities.preprocessing:Preprocessing Pipeline Object:\nPipeline(steps=[('preprocessing',\n                 FeatureUnion(transformer_list=[('pipeline-1',\n                                                 Pipeline(steps=[('functiontransformer',\n                                                                  FunctionTransformer(func=<function get_cat_cols>,\n                                                                                      kw_args={'cols': ['DESTINATIONGEOAFINITYLABEL']})),\n                                                                 ('ordinalencoder',\n                                                                  OrdinalEncoder(handle_unknown='use_encoded_value',\n                                                                                 unknown_value=-1))])),\n                                                ('pipeline-2',\n                                                 Pipeline(steps=[('...\n                                                                  FunctionTransformer(func=<function get_cont_cols>,\n                                                                                      kw_args={'cols': ['SUBSEASONSPERYEAR']})),\n                                                                 ('standardscaler',\n                                                                  StandardScaler())])),\n                                                ('pipeline-21',\n                                                 Pipeline(steps=[('functiontransformer',\n                                                                  FunctionTransformer(func=<function get_cont_cols>,\n                                                                                      kw_args={'cols': ['TOTALVISITS']})),\n                                                                 ('standardscaler',\n                                                                  StandardScaler())]))])),\n                ('imputing', SimpleImputer())])\nINFO:root:Successfully Spilt Data\nTrain: (24000, 24), (24000, 1)\nValid: (5100, 24), (5100, 1)\nTest: (900, 24), (900, 1)\nINFO:root:Size of the id_list for the hold set (900, 2)\nINFO:root:This project relies on the query to have accurate labels with no preprocessing..\nINFO:root:Pushing Sklearn Object to Azure: projects/LTBP/FY23/experiments/NOHYPEROPT/preprocessors/train_xgb_basic/LocalRunTeststandard_pipe.pickle\nINFO:data_system_utilities.azure.storage:Uploading LocalRunTeststandard_pipe.pickle, to Azure Storage projects/LTBP/FY23/experiments/NOHYPEROPT/preprocessors/train_xgb_basic/LocalRunTeststandard_pipe.pickle\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:root:LocalRunTeststandard_pipe.pickle successfully pushed to projects/LTBP/FY23/experiments/NOHYPEROPT/preprocessors/train_xgb_basic\nINFO:LTBP.modeling.models:Training on 24000 rows\n[0] validation_0-logloss:0.57143\n[1] validation_0-logloss:0.50628\n[2] validation_0-logloss:0.46755\n[3] validation_0-logloss:0.44437\n[4] validation_0-logloss:0.42945\n[5] validation_0-logloss:0.41972\n[6] validation_0-logloss:0.41147\n[7] validation_0-logloss:0.40669\n[8] validation_0-logloss:0.40339\n[9] validation_0-logloss:0.40173\n[10]    validation_0-logloss:0.40095\n[11]    validation_0-logloss:0.40031\n[12]    validation_0-logloss:0.39880\n[13]    validation_0-logloss:0.39776\n[14]    validation_0-logloss:0.39795\n[15]    validation_0-logloss:0.39772\n[16]    validation_0-logloss:0.39648\n[17]    validation_0-logloss:0.39631\n[18]    validation_0-logloss:0.39615\n[19]    validation_0-logloss:0.39548\n[20]    validation_0-logloss:0.39534\n[21]    validation_0-logloss:0.39518\n[22]    validation_0-logloss:0.39495\n[23]    validation_0-logloss:0.39488\n[24]    validation_0-logloss:0.39550\n[25]    validation_0-logloss:0.39563\n[26]    validation_0-logloss:0.39566\n[27]    validation_0-logloss:0.39548\n[28]    validation_0-logloss:0.39547\n[29]    validation_0-logloss:0.39528\n[30]    validation_0-logloss:0.39573\n[31]    validation_0-logloss:0.39531\n[32]    validation_0-logloss:0.39533\nINFO:root:Training Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.923    Accuracy: 0.846    Balanced Accuracy: 0.847\nINFO:root:Feature Importance df: \n                           COLS     IMP\n0                     EVERPASS  0.2758\n1         MOSTCOMMONTICKETCOMP  0.0352\n2            SUBSEASONSPERYEAR  0.0208\n3                  TOTALVISITS  0.0146\n4                GUESTBEHAVIOR  0.0144\n5                          AGE  0.0130\n6   DESTINATIONGEOAFINITYLABEL  0.0100\n7           ISEPICMIXACTIVATED  0.0068\n8            AVGVISITPERSEASON  0.0064\n9         MOSTSUBSEASONVISITED  0.0054\n10           MOSTVISITEDRESORT  0.0054\n11         TOTALSEASONSSCANNED  0.0052\n12           MOSTVISITEDREGION  0.0046\n13                EVERCOREPASS  0.0036\n14              RESORTSVISITED  0.0030\n15               MARKETINGZONE  0.0022\n16         ONLYSINGLERESORTKEY  0.0012\n17           SKIERABILITYLABEL  0.0010\n18             VISITMOSTINPEAK  0.0006\n19    PARTNERRESORTSCANNERFLAG  0.0000\n20                  GENDERCODE  0.0000\nINFO:root:Validation Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.900    Accuracy: 0.828    Balanced Accuracy: 0.829\nINFO:root:Feature Importance df: \n                           COLS     IMP\n0                     EVERPASS  0.2776\n1         MOSTCOMMONTICKETCOMP  0.0326\n2            SUBSEASONSPERYEAR  0.0126\n3                GUESTBEHAVIOR  0.0088\n4                  TOTALVISITS  0.0076\n5                          AGE  0.0072\n6   DESTINATIONGEOAFINITYLABEL  0.0070\n7           ISEPICMIXACTIVATED  0.0054\n8               RESORTSVISITED  0.0046\n9            MOSTVISITEDREGION  0.0042\n10           AVGVISITPERSEASON  0.0032\n11                EVERCOREPASS  0.0030\n12         ONLYSINGLERESORTKEY  0.0030\n13           MOSTVISITEDRESORT  0.0022\n14         TOTALSEASONSSCANNED  0.0020\n15        MOSTSUBSEASONVISITED  0.0014\n16           SKIERABILITYLABEL  0.0014\n17    PARTNERRESORTSCANNERFLAG  0.0006\n18               MARKETINGZONE  0.0000\n19             VISITMOSTINPEAK  0.0000\n20                  GENDERCODE -0.0010\nINFO:root:Test Set Evaluation\nINFO:root:Variable(s) of interest ['BOUGHTPASS'] AUC: 0.896    Accuracy: 0.829    Balanced Accuracy: 0.829\nINFO:root:Feature Importance df: \n                           COLS       IMP\n0                     EVERPASS  0.257778\n1         MOSTCOMMONTICKETCOMP  0.028889\n2            SUBSEASONSPERYEAR  0.024444\n3                  TOTALVISITS  0.015556\n4                GUESTBEHAVIOR  0.012222\n5          TOTALSEASONSSCANNED  0.008889\n6   DESTINATIONGEOAFINITYLABEL  0.005556\n7            MOSTVISITEDRESORT  0.003333\n8                 EVERCOREPASS  0.002222\n9                MARKETINGZONE  0.001111\n10                         AGE  0.001111\n11         ONLYSINGLERESORTKEY  0.000000\n12    PARTNERRESORTSCANNERFLAG  0.000000\n13           SKIERABILITYLABEL  0.000000\n14              RESORTSVISITED  0.000000\n15                  GENDERCODE -0.001111\n16           MOSTVISITEDREGION -0.002222\n17             VISITMOSTINPEAK -0.002222\n18        MOSTSUBSEASONVISITED -0.003333\n19           AVGVISITPERSEASON -0.003333\n20          ISEPICMIXACTIVATED -0.004444\nINFO:root:hold out data preview going to snowflake            ECID SEASONYEAR  ...          DATECREATED        EXP_COMMIT_CI_SHA\n14448  66980607    2019/20  ...  2022-11-03 17:54:12  NOHYPEROPT_LocalRunTest\n12515  87007753    2018/19  ...  2022-11-03 17:54:12  NOHYPEROPT_LocalRunTest\n2167   84798822    2018/19  ...  2022-11-03 17:54:12  NOHYPEROPT_LocalRunTest\n\n[3 rows x 5 columns]\nINFO:data_system_utilities.snowflake.query:creating table LTBP_HOLDOUT_TEST_MODEL_RESULTS\nINFO:data_system_utilities.snowflake.query:sqlalchemy snowflake engine created\nINFO:data_system_utilities.snowflake.query:table created\nINFO:root:saving test prediction file\nINFO:root:sending prediction file to azure to projects/LTBP/FY23/experiments/NOHYPEROPT/holdout_results/train_xgb_basic/\nINFO:data_system_utilities.azure.storage:Uploading holdout_NOHYPEROPTLocalRunTest.csv, to Azure Storage projects/LTBP/FY23/experiments/NOHYPEROPT/holdout_results/train_xgb_basic/holdout_NOHYPEROPTLocalRunTest.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.query:creating table LTBP_MODEL_TRACKING_FY23\nINFO:data_system_utilities.snowflake.query:sqlalchemy snowflake engine created\n\n\nINFO:data_system_utilities.snowflake.query:table created\nINFO:root:project log preview:\n                                  ACTION_DESCRIPTION  ... EVER_PRODUCTION\n0  Only here to see if it works delete at some po...  ...           False\n\n[1 rows x 12 columns]\nINFO:root:project log values preview:\n['Only here to see if it works delete at some point xgb_fit_only'\n 'model_training' 'LocalRunTest' 'dev' 'random' '2022-11-03 17:54:17'\n '{\"azure_parent_folder\": \"projects/LTBP/FY23/experiments/NOHYPEROPT\"}'\n '{\"training_metrics\": {\"auc\": 0.9233503051910592, \"acc\": 0.8459166666666667, \"bacc\": 0.8470889725812882}, \"fi_train\": {\"EVERPASS\": 0.27579999999999993, \"MOSTCOMMONTICKETCOMP\": 0.03520000000000001, \"SUBSEASONSPERYEAR\": 0.02079999999999993, \"TOTALVISITS\": 0.014599999999999946, \"GUESTBEHAVIOR\": 0.014399999999999968, \"AGE\": 0.0129999999999999, \"DESTINATIONGEOAFINITYLABEL\": 0.010000000000000009, \"ISEPICMIXACTIVATED\": 0.006799999999999917, \"AVGVISITPERSEASON\": 0.006399999999999961, \"MOSTSUBSEASONVISITED\": 0.00539999999999996}, \"valid_metrics\": {\"auc\": 0.9001165901790553, \"acc\": 0.827843137254902, \"bacc\": 0.8294653892340191}, \"fi_valid\": {\"EVERPASS\": 0.27760000000000007, \"MOSTCOMMONTICKETCOMP\": 0.03260000000000007, \"SUBSEASONSPERYEAR\": 0.012600000000000056, \"GUESTBEHAVIOR\": 0.00880000000000003, \"TOTALVISITS\": 0.007600000000000051, \"AGE\": 0.007199999999999984, \"DESTINATIONGEOAFINITYLABEL\": 0.007000000000000006, \"ISEPICMIXACTIVATED\": 0.005400000000000071, \"RESORTSVISITED\": 0.0046000000000000485, \"MOSTVISITEDREGION\": 0.0041999999999999815}, \"test_metrics\": {\"auc\": 0.8964439330564595, \"acc\": 0.8288888888888889, \"bacc\": 0.8290411310673139}, \"fi_test\": {\"EVERPASS\": 0.2577777777777778, \"MOSTCOMMONTICKETCOMP\": 0.028888888888888853, \"SUBSEASONSPERYEAR\": 0.02444444444444449, \"TOTALVISITS\": 0.015555555555555545, \"GUESTBEHAVIOR\": 0.012222222222222245, \"TOTALSEASONSSCANNED\": 0.008888888888888946, \"DESTINATIONGEOAFINITYLABEL\": 0.005555555555555536, \"MOSTVISITEDRESORT\": 0.0033333333333332993, \"EVERCOREPASS\": 0.0022222222222222365, \"MARKETINGZONE\": 0.0011111111111111738}}'\n 'NOHYPEROPT' True False False]\nINFO:root:Saving model and sending it to adls\nINFO:root:Pushing Sklearn Object to Azure: projects/LTBP/FY23/experiments/NOHYPEROPT/modeling/train_xgb_basic/train_xgb_basicLocalRunTestNOHYPEROPT.pkl\nINFO:data_system_utilities.azure.storage:Uploading train_xgb_basicLocalRunTestNOHYPEROPT.pkl, to Azure Storage projects/LTBP/FY23/experiments/NOHYPEROPT/modeling/train_xgb_basic/train_xgb_basicLocalRunTestNOHYPEROPT.pkl\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:root:train_xgb_basicLocalRunTestNOHYPEROPT.pkl successfully pushed to projects/LTBP/FY23/experiments/NOHYPEROPT/modeling/train_xgb_basic\n\n\n\nResults\nADLS\nCreated in this call are as follows:\n\nx and y preprocessor\n\nprojects/LTBP/FY23/experiments/BASELINE/preprocessors/train_xgb/\n\nSklearn Pipeline Model\n\nprojects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb/\n\nHold out results for this model in this experiment\n\nprojects/LTBP/FY23/experiments/BASELINE/holdout_results/train_xgb/\n\n\nSnowflake\nA project log for the current run this is a new standard approach that for model promotions needs a quick PR to allow for models being put into production. Similar to how the legacy project currently support something like PROD_MODEL and have it be a BOOL type if True this is what the schedule of this repo uses to go find the production model in adls. We might also want to have something like EVER_PROD_MODEL to allow a user to know what models in the project log made it to production\n\nAs of Nov 2nd this template doesn’t support the inference only runs, but it will soon\n\n\nsf.run_sql_str('''SELECT * \nFROM MACHINELEARNINGOUTPUTS.LTBP.LTBP_MODEL_TRACKING_FY23\nORDER BY TIMESTAMP DESC\nLIMIT 1\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      ACTION_DESCRIPTION\n      TRANSACTION_TYPE\n      COMMITID\n      ENVIRONMENT\n      BRANCH\n      TIMESTAMP\n      ARTIFACTS\n      METRICS\n      EXPERIMENT_NAME\n      EXPERIMENT\n      PRODUCTION_MODEL\n      EVER_PRODUCTION\n    \n  \n  \n    \n      0\n      Only here to see if it works delete at some po...\n      model_training\n      LocalRunTest\n      dev\n      random\n      2022-11-03 17:54:17\n      {\"azure_parent_folder\": \"projects/LTBP/FY23/ex...\n      {\"training_metrics\": {\"auc\": 0.923350305191059...\n      NOHYPEROPT\n      True\n      False\n      False\n    \n  \n\n\n\n\nA hold out test set that gets sent to snowflake for post analysis work if a data scientist wants to look at where the model is doing well or even how well does this model extrapolate over season years for example in LTBP’s case\n\nsf.run_sql_str('''SELECT * \nFROM MACHINELEARNINGOUTPUTS.DEV.LTBP_HOLDOUT_TEST_MODEL_RESULTS\nLIMIT 5\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      ECID\n      SEASONYEAR\n      PROBABILITY\n      DATECREATED\n      EXP_COMMIT_CI_SHA\n    \n  \n  \n    \n      0\n      25115976\n      2019/20\n      0.386076\n      2022-11-03 11:11:13\n      BASELINE_LocalRunTest\n    \n    \n      1\n      5198697\n      2018/19\n      0.392566\n      2022-11-03 11:11:13\n      BASELINE_LocalRunTest\n    \n    \n      2\n      86694567\n      2018/19\n      0.385913\n      2022-11-03 11:11:13\n      BASELINE_LocalRunTest\n    \n    \n      3\n      17645838\n      2018/19\n      0.395433\n      2022-11-03 11:11:13\n      BASELINE_LocalRunTest\n    \n    \n      4\n      11271320\n      2018/19\n      0.394330\n      2022-11-03 11:11:13\n      BASELINE_LocalRunTest"
  },
  {
    "objectID": "calling_library_cli.html#infer-model-results",
    "href": "calling_library_cli.html#infer-model-results",
    "title": "Use Your CLI Commands",
    "section": "Infer Model Results",
    "text": "Infer Model Results\n\n! model_inference --sfSchema 'dev' --experiment_name 'BASELINE' --experiment\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/BASELINE'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/inference_data/\n    LIMIT 1000\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR AGE  ... TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK\n0   4274289    2021/22  33  ...                   0           0               0\n1  83442101    2021/22  40  ...                   0           0               0\n2   7327662    2021/22  17  ...                   0           0               0\n3   6579493    2021/22  63  ...                   0           0               0\n4  59180198    2021/22  35  ...                   0           0               0\n\n[5 rows x 24 columns]\nINFO:root:Loading Sklearn Object to: ./models/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Downloading projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb/train_xgbLocalRunTestBASELINE.pkl to ./models/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Download complete\nINFO:root:Sklearn Object Loaded\nINFO:root:preview predictions being added:\n       ECID SEASONYEAR  ...         DATE_CREATED EXPERIMENT\n0   4274289    2021/22  ...  2022-11-03 16:54:50   BASELINE\n1  83442101    2021/22  ...  2022-11-03 16:54:50   BASELINE\n2   7327662    2021/22  ...  2022-11-03 16:54:50   BASELINE\n\n[3 rows x 6 columns]\nINFO:root:preview predictions values addes:\n['4274289' '2021/22' 0.04792783 'LocalRunTest' '2022-11-03 16:54:50'\n 'BASELINE']\nINFO:root:preview predictions being added columns:\nIndex(['ECID', 'SEASONYEAR', 'PROBABILITY', 'CI_COMMIT_SHA', 'DATE_CREATED',\n       'EXPERIMENT'],\n      dtype='object')\nINFO:data_system_utilities.azure.storage:Uploading predictions_LocalRunTestBASELINE.csv, to Azure Storage projects/LTBP/FY23/experiments/BASELINE/predictions/train_xgb/predictions_LocalRunTestBASELINE.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:\n        create or replace table LTBP_PREDICTIONS_FY23 (ECID VARCHAR, SEASONYEAR VARCHAR, PROBABILITY FLOAT, CI_COMMIT_SHA VARCHAR, DATE_CREATED VARCHAR, EXPERIMENT VARCHAR);\n        \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Table LTBP_PREDICTIONS_FY23 successfully created.\nINFO:root:Pushing Forecasted Season from ADLS to Snowflake\nINFO:data_system_utilities.snowflake.copyinto:\ncopy into MACHINELEARNINGOUTPUTS.dev.LTBP_PREDICTIONS_FY23\nfrom 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/BASELINE/predictions/train_xgb/predictions_LocalRunTestBASELINE.csv'\nfile_format = (type = csv     skip_header = 1)\ncredentials= (azure_sas_token = '?sv=2019-12-12&ss=bfqt&srt=sco&sp=rwdlacupx&se=2031-01-22T06:17:14Z&st=2021-01-21T22:17:14Z&spr=https&sig=kIHogByJjyVWyL6XupA0CBUB1iw12%2FeXWFQiOj5fB5c%3D')\npattern = '.*.csv';\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:preview of queried table being added:\n       ECID SEASONYEAR  ...         DATE_CREATED EXPERIMENT\n0   4274289    2021/22  ...  2022-11-03 16:54:50   BASELINE\n1  83442101    2021/22  ...  2022-11-03 16:54:50   BASELINE\n2   7327662    2021/22  ...  2022-11-03 16:54:50   BASELINE\n\n[3 rows x 6 columns]\nINFO:root:preview predictions values addes:\n['4274289' '2021/22' 0.04792783 'LocalRunTest' '2022-11-03 16:54:50'\n 'BASELINE']\n\n\n\n! model_inference --sfSchema 'dev' --experiment_name 'NOHYPEROPT' --experiment\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/NOHYPEROPT'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/inference_data/\n    LIMIT 1000\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR  AGE  ... TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK\n0   3396514    2021/22   38  ...                   0           0               0\n1  57254352    2021/22   21  ...                   0           0               0\n2  60713843    2021/22   10  ...                   0           0               0\n3   7505200    2021/22  119  ...                   0           0               0\n4  37310378    2021/22   16  ...                   0           0               0\n\n[5 rows x 24 columns]\nINFO:root:Loading Sklearn Object to: ./models/train_xgb_basicLocalRunTestNOHYPEROPT.pkl\nINFO:data_system_utilities.azure.storage:Downloading projects/LTBP/FY23/experiments/NOHYPEROPT/modeling/train_xgb_basic/train_xgb_basicLocalRunTestNOHYPEROPT.pkl to ./models/train_xgb_basicLocalRunTestNOHYPEROPT.pkl\nINFO:data_system_utilities.azure.storage:Download complete\nINFO:root:Sklearn Object Loaded\nINFO:root:preview predictions being added:\n       ECID SEASONYEAR  ...         DATE_CREATED  EXPERIMENT\n0   3396514    2021/22  ...  2022-11-03 16:55:02  NOHYPEROPT\n1  57254352    2021/22  ...  2022-11-03 16:55:02  NOHYPEROPT\n2  60713843    2021/22  ...  2022-11-03 16:55:02  NOHYPEROPT\n\n[3 rows x 6 columns]\nINFO:root:preview predictions values addes:\n['3396514' '2021/22' 0.032057054 'LocalRunTest' '2022-11-03 16:55:02'\n 'NOHYPEROPT']\nINFO:root:preview predictions being added columns:\nIndex(['ECID', 'SEASONYEAR', 'PROBABILITY', 'CI_COMMIT_SHA', 'DATE_CREATED',\n       'EXPERIMENT'],\n      dtype='object')\nINFO:data_system_utilities.azure.storage:Uploading predictions_LocalRunTestNOHYPEROPT.csv, to Azure Storage projects/LTBP/FY23/experiments/NOHYPEROPT/predictions/train_xgb_basic/predictions_LocalRunTestNOHYPEROPT.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Pushing Forecasted Season from ADLS to Snowflake\nINFO:data_system_utilities.snowflake.copyinto:\ncopy into MACHINELEARNINGOUTPUTS.dev.LTBP_PREDICTIONS_FY23\nfrom 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/experiments/NOHYPEROPT/predictions/train_xgb_basic/predictions_LocalRunTestNOHYPEROPT.csv'\nfile_format = (type = csv     skip_header = 1)\ncredentials= (azure_sas_token = '?sv=2019-12-12&ss=bfqt&srt=sco&sp=rwdlacupx&se=2031-01-22T06:17:14Z&st=2021-01-21T22:17:14Z&spr=https&sig=kIHogByJjyVWyL6XupA0CBUB1iw12%2FeXWFQiOj5fB5c%3D')\npattern = '.*.csv';\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:preview of queried table being added:\n       ECID SEASONYEAR  ...         DATE_CREATED  EXPERIMENT\n0   3396514    2021/22  ...  2022-11-03 16:55:02  NOHYPEROPT\n1  57254352    2021/22  ...  2022-11-03 16:55:02  NOHYPEROPT\n2  60713843    2021/22  ...  2022-11-03 16:55:02  NOHYPEROPT\n\n[3 rows x 6 columns]\nINFO:root:preview predictions values addes:\n['3396514' '2021/22' 0.032057054 'LocalRunTest' '2022-11-03 16:55:02'\n 'NOHYPEROPT']\n\n\n\nResults\nADLS\nA .csv file is sent to the following location and the reason that it’s in a .csv file is that it isn’t huge and is only sent to snowflake once and it’s sometimes nice to be able to pull down the file and look into it and parquet files don’t allow you to do that, but completely open to changing this process\n\nprojects/LTBP/FY23/experiments/BASELINE/predictions/train_xgb/\n\nSnowflake\nThe an inference table is set up and at the current moment we are appending to the inference table this could change shortly, but for right now your inference table can be unique with your DATE_CREATED + EXPERIMENT. During iteration of this quick process understanding what is desired is part of this and there can be value in having the last runs predictions in the database.\nLooking for input on this\n\nNote: For the production run version creating an archive of all the runs that occur for a production level run seems like a pretty good way to save ourselves trouble, but again all the predictions will always be recoverable inside of adls.\n\n\nsf.run_sql_str('''SELECT * \nFROM MACHINELEARNINGOUTPUTS.DEV.LTBP_PREDICTIONS_FY23\nORDER BY DATE_CREATED DESC\nLIMIT 5\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      ECID\n      SEASONYEAR\n      PROBABILITY\n      CI_COMMIT_SHA\n      DATE_CREATED\n      EXPERIMENT\n    \n  \n  \n    \n      0\n      7505200\n      2021/22\n      0.049381\n      LocalRunTest\n      2022-11-03 16:55:02\n      NOHYPEROPT\n    \n    \n      1\n      57254352\n      2021/22\n      0.020158\n      LocalRunTest\n      2022-11-03 16:55:02\n      NOHYPEROPT\n    \n    \n      2\n      3396514\n      2021/22\n      0.032057\n      LocalRunTest\n      2022-11-03 16:55:02\n      NOHYPEROPT\n    \n    \n      3\n      37310378\n      2021/22\n      0.018215\n      LocalRunTest\n      2022-11-03 16:55:02\n      NOHYPEROPT\n    \n    \n      4\n      60713843\n      2021/22\n      0.096196\n      LocalRunTest\n      2022-11-03 16:55:02\n      NOHYPEROPT\n    \n  \n\n\n\n\n\nsf.run_sql_str('''SELECT DISTINCT DATE_CREATED, EXPERIMENT\nFROM MACHINELEARNINGOUTPUTS.DEV.LTBP_PREDICTIONS_FY23\nLIMIT 5\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      DATE_CREATED\n      EXPERIMENT\n    \n  \n  \n    \n      0\n      2022-11-03 16:54:50\n      BASELINE\n    \n    \n      1\n      2022-11-03 16:55:02\n      NOHYPEROPT"
  },
  {
    "objectID": "calling_library_cli.html#model-promotion",
    "href": "calling_library_cli.html#model-promotion",
    "title": "Use Your CLI Commands",
    "section": "Model Promotion",
    "text": "Model Promotion\nLets say this experiment is the model that you are so happy with and you didn’t want to run it in a gitlab/github pipeline to get the results you can always promote a model to production because schedule inference runs will only be pulling inference data and running the model inference and post analysis that is custom to your project\nWhy?\nSo the question you might be asking is why wouldn’t I just promote the model that I just ran to prod or make a copy of it in a “production schema” well that could happen but we like to be module in the approach we take as well as you need to be very intentional to overwrite the results in prod.\nThe long story short is that it forces you to think about the promotion of a model before letting it happen. It is manual, but it is manual for the reason to slow you down\nHow\n\nsf.run_sql_str('''SELECT * \nFROM MACHINELEARNINGOUTPUTS.LTBP.LTBP_MODEL_TRACKING_FY23\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      ACTION_DESCRIPTION\n      TRANSACTION_TYPE\n      COMMITID\n      ENVIRONMENT\n      BRANCH\n      TIMESTAMP\n      ARTIFACTS\n      METRICS\n      EXPERIMENT_NAME\n      EXPERIMENT\n      PRODUCTION_MODEL\n      EVER_PRODUCTION\n    \n  \n  \n    \n      0\n      Standard baseline xgb_hyperopt approach status...\n      model_training\n      LocalRunTest\n      dev\n      random\n      2022-11-03 17:53:58\n      {\"azure_parent_folder\": \"projects/LTBP/FY23/ex...\n      {\"training_metrics\": {\"auc\": 0.901687451479167...\n      BASELINE\n      True\n      False\n      False\n    \n    \n      1\n      Only here to see if it works delete at some po...\n      model_training\n      LocalRunTest\n      dev\n      random\n      2022-11-03 17:54:17\n      {\"azure_parent_folder\": \"projects/LTBP/FY23/ex...\n      {\"training_metrics\": {\"auc\": 0.923350305191059...\n      NOHYPEROPT\n      True\n      False\n      False\n    \n  \n\n\n\n\nIf this is your first time then you should not have any production models created for this project already\n\nsf.run_sql_str('''SELECT * \nFROM MACHINELEARNINGOUTPUTS.LTBP.LTBP_MODEL_TRACKING_FY23\nWHERE PRODUCTION_MODEL\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      ACTION_DESCRIPTION\n      TRANSACTION_TYPE\n      COMMITID\n      ENVIRONMENT\n      BRANCH\n      TIMESTAMP\n      ARTIFACTS\n      METRICS\n      EXPERIMENT_NAME\n      EXPERIMENT\n      PRODUCTION_MODEL\n      EVER_PRODUCTION\n    \n  \n  \n  \n\n\n\n\nSo to promote this model we will need to update it and an easy way to do this is with the UPDATE command\nThere are of course other ways to do this in type of modeling approach you can come up with a custom post analysis work stream that promotes the model that is the best base on w/e kind of metrics you want, but this is how you can do it in the simplest approach\nHere we are pushing two models to production to make sure the process works for two models that you may want to have this ability for an ensemble or a specific category of guest that the model works well for so that you can build a view on top of this table to allow the business to query off\n\nsf.run_sql_str('''UPDATE MACHINELEARNINGOUTPUTS.LTBP.LTBP_MODEL_TRACKING_FY23\nSET PRODUCTION_MODEL = True\nWHERE COMMITID = 'LocalRunTest'\nAND EXPERIMENT_NAME = 'BASELINE'\nAND EXPERIMENT = 'True'\nAND CAST(TIMESTAMP as VARCHAR) = '2022-11-03 17:53:58'\n''')\n\nsf.run_sql_str('''UPDATE MACHINELEARNINGOUTPUTS.LTBP.LTBP_MODEL_TRACKING_FY23\nSET PRODUCTION_MODEL = True\nWHERE COMMITID = 'LocalRunTest'\nAND EXPERIMENT_NAME = 'NOHYPEROPT'\nAND EXPERIMENT = 'True'\nAND CAST(TIMESTAMP as VARCHAR) = '2022-11-03 17:54:17'\n''')\n\nsf.run_sql_str('''SELECT * \nFROM MACHINELEARNINGOUTPUTS.LTBP.LTBP_MODEL_TRACKING_FY23\nWHERE PRODUCTION_MODEL\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      ACTION_DESCRIPTION\n      TRANSACTION_TYPE\n      COMMITID\n      ENVIRONMENT\n      BRANCH\n      TIMESTAMP\n      ARTIFACTS\n      METRICS\n      EXPERIMENT_NAME\n      EXPERIMENT\n      PRODUCTION_MODEL\n      EVER_PRODUCTION\n    \n  \n  \n    \n      0\n      Standard baseline xgb_hyperopt approach status...\n      model_training\n      LocalRunTest\n      dev\n      random\n      2022-11-03 17:53:58\n      {\"azure_parent_folder\": \"projects/LTBP/FY23/ex...\n      {\"training_metrics\": {\"auc\": 0.901687451479167...\n      BASELINE\n      True\n      True\n      False\n    \n    \n      1\n      Only here to see if it works delete at some po...\n      model_training\n      LocalRunTest\n      dev\n      random\n      2022-11-03 17:54:17\n      {\"azure_parent_folder\": \"projects/LTBP/FY23/ex...\n      {\"training_metrics\": {\"auc\": 0.923350305191059...\n      NOHYPEROPT\n      True\n      True\n      False\n    \n  \n\n\n\n\nImportant\nNever forget to set your other model to a no longer production model, but a past production model\n\nsf.run_sql_str('''UPDATE MACHINELEARNINGOUTPUTS.LTBP.LTBP_MODEL_TRACKING_FY23\nSET PRODUCTION_MODEL = False, EVER_PRODUCTION = True\nWHERE COMMITID = 'LocalRunTest'\nAND EXPERIMENT_NAME = 'BASELINE'\nAND EXPERIMENT = 'True'\nAND CAST(TIMESTAMP as VARCHAR) = '2022-11-03 12:11:18' --Here to show what it might look like\n''')\n\nsf.run_sql_str('''SELECT * \nFROM MACHINELEARNINGOUTPUTS.LTBP.LTBP_MODEL_TRACKING_FY23\nWHERE EVER_PRODUCTION\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      ACTION_DESCRIPTION\n      TRANSACTION_TYPE\n      COMMITID\n      ENVIRONMENT\n      BRANCH\n      TIMESTAMP\n      ARTIFACTS\n      METRICS\n      EXPERIMENT_NAME\n      EXPERIMENT\n      PRODUCTION_MODEL\n      EVER_PRODUCTION"
  },
  {
    "objectID": "calling_library_cli.html#production-level-run",
    "href": "calling_library_cli.html#production-level-run",
    "title": "Use Your CLI Commands",
    "section": "Production Level Run",
    "text": "Production Level Run\nAwesome, there is a model that is ready to be predicted on lets go ahead and show what would be needed to run an inference only pipeline\n\n! data_creation  --train_or_inference \"INFERENCE\" --experiment_name \"BASELINE\"\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:root:This is a production run\nINFO:root:Loading Yaml Files..\nINFO:root:Generating Feature Set Query\nINFO:root:static features in data set: \n ['DESTINATIONGEOAFINITYLABEL', 'GenderCode']\nINFO:root:temporal features in data set: \n ['Age', 'AvgVisitPerSeason', 'BoughtPass', 'EverCorePass', 'EverPass', 'GuestBehavior', 'IsEpicMixActivated', 'MarketingZone', 'MostCommonTicketComp', 'MostSubSeasonVisited', 'MostVisitedRegion', 'MostVisitedResort', 'OnlySingleResortKey', 'PartnerResortScannerFlag', 'ResortsVisited', 'SkierabilityLabel', 'SubSeasonsPerYear', 'TotalSeasonsScanned', 'TotalVisits', 'VisitMostInPeak']\nINFO:root:Appending static feature DESTINATIONGEOAFINITYLABEL to query\nINFO:root:Appending static feature GenderCode to query\nINFO:root:Finished appending static features\nINFO:root:reading inference_base.sql for base query...\nINFO:root:final query output: \n select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20190101, 20221005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20190101, 20221005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2021/22') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2021/22') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2021/22') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20190101, 20221005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20190101, 20221005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20190101, 20221005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2021/22') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20190101, 20221005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20190101, 20221005) as VisitMostInPeak\n\n, '2021/22' as SEASONYEAR\nfrom\n(-- base EDEE team guest behavior\n  with edee_base as (\n      SELECT \n            distinct ECID\n      from BIDE_EDWDB_CUSTOMERMART_PROD.DBO.CustomerPASSPURCHASEBEHAVIOR cla\n      where \n              cla.GuestPassPurchaseBehaviorDetailLabel <> 'Unknown'\n  ),\n\n  -- pass prospects not in guest behavior\n  prospects as (\n      Select\n            distinct ECID\n      from Vail_Reporting.Prod.GuestBehaviorBase\n      where \n              GuestBehavior = 'Prospect'\n          and salesseason = '2021/22'\n  ),\n\n  -- paid prospects not in guest behavior\n  other_scans as (\n      select\n            distinct a.ECID\n      from\n      (\n          select \n                distinct ECID\n              , SeasonYear\n          from \"BIDE_EDWDB_ARA_PROD\".\"DBO\".\"SCANDAY\"\n              where Season = 'Winter'\n      ) a\n      left join Vail_Reporting.Prod.GuestBehaviorBase b \n          on a.ECID = b.ECID and a.SeasonYear = b.SalesSeason\n      where \n              b.GuestBehavior is null\n          and a.seasonyear = '2021/22'\n  )\n\n  select\n        distinct ECID\n      , 'Inference Set' as SeasonYear\n  from\n  (\n      select\n            coalesce(base.ecid, pro.ecid, os.ecid) as ecid\n      from edee_base base\n      full outer join prospects pro\n          on pro.ecid = base.ecid\n      full outer join other_scans os\n          on os.ecid = base.ecid\n  ) a)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid\nINFO:root:Checking projects/LTBP/FY23/LocalRunTest/BASELINE/inference_data/ to either skip creation for experiment or create a production dataset\nINFO:data_system_utilities.azure.storage:number of files in container path recursively 0\nINFO:data_system_utilities.snowflake.copyinto:\nCOPY INTO 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/BASELINE/inference_data/'\nFROM (select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20190101, 20221005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20190101, 20221005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2021/22') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2021/22') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2021/22') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20190101, 20221005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20190101, 20221005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20190101, 20221005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2021/22') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20190101, 20221005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20190101, 20221005) as VisitMostInPeak\n\n, '2021/22' as SEASONYEAR\nfrom\n(-- base EDEE team guest behavior\n  with edee_base as (\n      SELECT \n            distinct ECID\n      from BIDE_EDWDB_CUSTOMERMART_PROD.DBO.CustomerPASSPURCHASEBEHAVIOR cla\n      where \n              cla.GuestPassPurchaseBehaviorDetailLabel <> 'Unknown'\n  ),\n\n  -- pass prospects not in guest behavior\n  prospects as (\n      Select\n            distinct ECID\n      from Vail_Reporting.Prod.GuestBehaviorBase\n      where \n              GuestBehavior = 'Prospect'\n          and salesseason = '2021/22'\n  ),\n\n  -- paid prospects not in guest behavior\n  other_scans as (\n      select\n            distinct a.ECID\n      from\n      (\n          select \n                distinct ECID\n              , SeasonYear\n          from \"BIDE_EDWDB_ARA_PROD\".\"DBO\".\"SCANDAY\"\n              where Season = 'Winter'\n      ) a\n      left join Vail_Reporting.Prod.GuestBehaviorBase b \n          on a.ECID = b.ECID and a.SeasonYear = b.SalesSeason\n      where \n              b.GuestBehavior is null\n          and a.seasonyear = '2021/22'\n  )\n\n  select\n        distinct ECID\n      , 'Inference Set' as SeasonYear\n  from\n  (\n      select\n            coalesce(base.ecid, pro.ecid, os.ecid) as ecid\n      from edee_base base\n      full outer join prospects pro\n          on pro.ecid = base.ecid\n      full outer join other_scans os\n          on os.ecid = base.ecid\n  ) a)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid)\n\nmax_file_size = 3200000\noverwrite = True\nfile_format = (type = parquet          )\ncredentials= (azure_sas_token = '**MASKED**')\nheader = True;\n\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:data has been delivered from sf to adls\n\n\n\n! data_creation  --train_or_inference \"INFERENCE\" --experiment_name \"NOHYPEROPT\"\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:root:This is a production run\nINFO:root:Loading Yaml Files..\nINFO:root:Generating Feature Set Query\nINFO:root:static features in data set: \n ['DESTINATIONGEOAFINITYLABEL', 'GenderCode']\nINFO:root:temporal features in data set: \n ['Age', 'AvgVisitPerSeason', 'BoughtPass', 'EverCorePass', 'EverPass', 'GuestBehavior', 'IsEpicMixActivated', 'MarketingZone', 'MostCommonTicketComp', 'MostSubSeasonVisited', 'MostVisitedRegion', 'MostVisitedResort', 'OnlySingleResortKey', 'PartnerResortScannerFlag', 'ResortsVisited', 'SkierabilityLabel', 'SubSeasonsPerYear', 'TotalSeasonsScanned', 'TotalVisits', 'VisitMostInPeak']\nINFO:root:Appending static feature DESTINATIONGEOAFINITYLABEL to query\nINFO:root:Appending static feature GenderCode to query\nINFO:root:Finished appending static features\nINFO:root:reading inference_base.sql for base query...\nINFO:root:final query output: \n select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20190101, 20221005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20190101, 20221005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2021/22') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2021/22') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2021/22') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20190101, 20221005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20190101, 20221005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20190101, 20221005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2021/22') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20190101, 20221005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20190101, 20221005) as VisitMostInPeak\n\n, '2021/22' as SEASONYEAR\nfrom\n(-- base EDEE team guest behavior\n  with edee_base as (\n      SELECT \n            distinct ECID\n      from BIDE_EDWDB_CUSTOMERMART_PROD.DBO.CustomerPASSPURCHASEBEHAVIOR cla\n      where \n              cla.GuestPassPurchaseBehaviorDetailLabel <> 'Unknown'\n  ),\n\n  -- pass prospects not in guest behavior\n  prospects as (\n      Select\n            distinct ECID\n      from Vail_Reporting.Prod.GuestBehaviorBase\n      where \n              GuestBehavior = 'Prospect'\n          and salesseason = '2021/22'\n  ),\n\n  -- paid prospects not in guest behavior\n  other_scans as (\n      select\n            distinct a.ECID\n      from\n      (\n          select \n                distinct ECID\n              , SeasonYear\n          from \"BIDE_EDWDB_ARA_PROD\".\"DBO\".\"SCANDAY\"\n              where Season = 'Winter'\n      ) a\n      left join Vail_Reporting.Prod.GuestBehaviorBase b \n          on a.ECID = b.ECID and a.SeasonYear = b.SalesSeason\n      where \n              b.GuestBehavior is null\n          and a.seasonyear = '2021/22'\n  )\n\n  select\n        distinct ECID\n      , 'Inference Set' as SeasonYear\n  from\n  (\n      select\n            coalesce(base.ecid, pro.ecid, os.ecid) as ecid\n      from edee_base base\n      full outer join prospects pro\n          on pro.ecid = base.ecid\n      full outer join other_scans os\n          on os.ecid = base.ecid\n  ) a)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid\nINFO:root:Checking projects/LTBP/FY23/LocalRunTest/NOHYPEROPT/inference_data/ to either skip creation for experiment or create a production dataset\nINFO:data_system_utilities.azure.storage:number of files in container path recursively 0\nINFO:data_system_utilities.snowflake.copyinto:\nCOPY INTO 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/NOHYPEROPT/inference_data/'\nFROM (select\nbase.*\n, joined.DESTINATIONGEOAFINITYLABEL\n, joined.GenderCode\n, MACHINELEARNINGFEATURES.PROD.Age_ECID_Temporal(base.ECID, 20190101, 20221005) as Age, MACHINELEARNINGFEATURES.PROD.AvgVisitPerSeason_ECID_Temporal(base.ECID, 20190101, 20221005) as AvgVisitPerSeason, MACHINELEARNINGFEATURES.PROD.BoughtPass_ECID_Temporal(base.ECID, '2021/22') as BoughtPass, MACHINELEARNINGFEATURES.PROD.EverCorePass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverCorePass, MACHINELEARNINGFEATURES.PROD.EverPass_ECID_Temporal(base.ECID, 20051001, 20221005) as EverPass, MACHINELEARNINGFEATURES.PROD.GuestBehavior_ECID_Temporal(base.ECID, '2021/22') as GuestBehavior, MACHINELEARNINGFEATURES.PROD.IsEpicMixActivated_ECID_Temporal(base.ECID, '2021/22') as IsEpicMixActivated, MACHINELEARNINGFEATURES.PROD.MarketingZone_ECID_Temporal(base.ECID, '2021/22') as MarketingZone, MACHINELEARNINGFEATURES.PROD.MostCommonTicketComp_ECID_Temporal(base.ECID, 20190101, 20221005) as MostCommonTicketComp, MACHINELEARNINGFEATURES.PROD.MostSubSeasonVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as MostSubSeasonVisited, MACHINELEARNINGFEATURES.PROD.MostVisitedRegion_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedRegion, MACHINELEARNINGFEATURES.PROD.MostVisitedResort_ECID_Temporal(base.ECID, 20190101, 20221005) as MostVisitedResort, MACHINELEARNINGFEATURES.PROD.OnlySingleResortKey_ECID_Temporal(base.ECID, 20190101, 20221005) as OnlySingleResortKey, MACHINELEARNINGFEATURES.PROD.PartnerResortScannerFlag_ECID_Temporal(base.ECID, 20190101, 20221005) as PartnerResortScannerFlag, MACHINELEARNINGFEATURES.PROD.ResortsVisited_ECID_Temporal(base.ECID, 20190101, 20221005) as ResortsVisited, MACHINELEARNINGFEATURES.PROD.SkierabilityLabel_ECID_Temporal(base.ECID, '2021/22') as SkierabilityLabel, MACHINELEARNINGFEATURES.PROD.SubSeasonsPerYear_ECID_Temporal(base.ECID, 20190101, 20221005) as SubSeasonsPerYear, MACHINELEARNINGFEATURES.PROD.TotalSeasonsScanned_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalSeasonsScanned, MACHINELEARNINGFEATURES.PROD.TotalVisits_ECID_Temporal(base.ECID, 20190101, 20221005) as TotalVisits, MACHINELEARNINGFEATURES.PROD.VisitMostInPeak_ECID_Temporal(base.ECID, 20190101, 20221005) as VisitMostInPeak\n\n, '2021/22' as SEASONYEAR\nfrom\n(-- base EDEE team guest behavior\n  with edee_base as (\n      SELECT \n            distinct ECID\n      from BIDE_EDWDB_CUSTOMERMART_PROD.DBO.CustomerPASSPURCHASEBEHAVIOR cla\n      where \n              cla.GuestPassPurchaseBehaviorDetailLabel <> 'Unknown'\n  ),\n\n  -- pass prospects not in guest behavior\n  prospects as (\n      Select\n            distinct ECID\n      from Vail_Reporting.Prod.GuestBehaviorBase\n      where \n              GuestBehavior = 'Prospect'\n          and salesseason = '2021/22'\n  ),\n\n  -- paid prospects not in guest behavior\n  other_scans as (\n      select\n            distinct a.ECID\n      from\n      (\n          select \n                distinct ECID\n              , SeasonYear\n          from \"BIDE_EDWDB_ARA_PROD\".\"DBO\".\"SCANDAY\"\n              where Season = 'Winter'\n      ) a\n      left join Vail_Reporting.Prod.GuestBehaviorBase b \n          on a.ECID = b.ECID and a.SeasonYear = b.SalesSeason\n      where \n              b.GuestBehavior is null\n          and a.seasonyear = '2021/22'\n  )\n\n  select\n        distinct ECID\n      , 'Inference Set' as SeasonYear\n  from\n  (\n      select\n            coalesce(base.ecid, pro.ecid, os.ecid) as ecid\n      from edee_base base\n      full outer join prospects pro\n          on pro.ecid = base.ecid\n      full outer join other_scans os\n          on os.ecid = base.ecid\n  ) a)base\ninner join machinelearningfeatures.prod.featurestore_ecid joined on joined.ecid = base.ecid)\n\nmax_file_size = 3200000\noverwrite = True\nfile_format = (type = parquet          )\ncredentials= (azure_sas_token = '**MASKED**')\nheader = True;\n\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:data has been delivered from sf to adls\n\n\n\n! model_inference --sfSchema 'LTBP'\n\n/Users/jeremydemlow/miniforge3/envs/ltbp/lib/python3.9/site-packages/snowflake/connector/options.py:96: UserWarning: You have an incompatible version of 'pyarrow' installed (6.0.0), please install a version that adheres to: 'pyarrow<8.1.0,>=8.0.0; extra == \"pandas\"'\n  warn_incompatible_dep(\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Drop statement executed successfully (LTBP_PREDICTIONS_FY23 already dropped).\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/BASELINE/'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/inference_data/\n    LIMIT 1000\n    \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR AGE  ... TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK\n0   2327342    2021/22  26  ...                   0           0               0\n1  20051369    2021/22  44  ...                   0           0               0\n2  56109980    2021/22  48  ...                   0           0               0\n3  48596844    2021/22  19  ...                   0           0               0\n4  56486185    2021/22   7  ...                   0           0               0\n\n[5 rows x 24 columns]\nINFO:root:Loading Sklearn Object to: ./models/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Downloading projects/LTBP/FY23/experiments/BASELINE/modeling/train_xgb/train_xgbLocalRunTestBASELINE.pkl to ./models/train_xgbLocalRunTestBASELINE.pkl\nINFO:data_system_utilities.azure.storage:Download complete\nINFO:root:Sklearn Object Loaded\nINFO:root:preview predictions being added:\n       ECID SEASONYEAR  ...         DATE_CREATED EXPERIMENT\n0   2327342    2021/22  ...  2022-11-04 07:54:23   BASELINE\n1  20051369    2021/22  ...  2022-11-04 07:54:23   BASELINE\n2  56109980    2021/22  ...  2022-11-04 07:54:23   BASELINE\n\n[3 rows x 6 columns]\nINFO:root:preview predictions values addes:\n['2327342' '2021/22' 0.0482946 'LocalRunTest' '2022-11-04 07:54:23'\n 'BASELINE']\nINFO:root:preview predictions being added columns:\nIndex(['ECID', 'SEASONYEAR', 'PROBABILITY', 'CI_COMMIT_SHA', 'DATE_CREATED',\n       'EXPERIMENT'],\n      dtype='object')\nINFO:data_system_utilities.azure.storage:Uploading predictions_LocalRunTestBASELINE.csv, to Azure Storage projects/LTBP/FY23/LocalRunTest/BASELINE/predictions/train_xgb/predictions_LocalRunTestBASELINE.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:\n        create or replace table LTBP_PREDICTIONS_FY23 (ECID VARCHAR, SEASONYEAR VARCHAR, PROBABILITY FLOAT, CI_COMMIT_SHA VARCHAR, DATE_CREATED VARCHAR, EXPERIMENT VARCHAR);\n        \nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Table LTBP_PREDICTIONS_FY23 successfully created.\nINFO:root:Pushing Forecasted Season from ADLS to Snowflake\nINFO:data_system_utilities.snowflake.copyinto:\ncopy into MACHINELEARNINGOUTPUTS.LTBP.LTBP_PREDICTIONS_FY23\nfrom 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/BASELINE/predictions/train_xgb/predictions_LocalRunTestBASELINE.csv'\nfile_format = (type = csv     skip_header = 1)\ncredentials= (azure_sas_token = '?sv=2019-12-12&ss=bfqt&srt=sco&sp=rwdlacupx&se=2031-01-22T06:17:14Z&st=2021-01-21T22:17:14Z&spr=https&sig=kIHogByJjyVWyL6XupA0CBUB1iw12%2FeXWFQiOj5fB5c%3D')\npattern = '.*.csv';\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:preview of queried table being added:\n       ECID SEASONYEAR  ...         DATE_CREATED EXPERIMENT\n0   2327342    2021/22  ...  2022-11-04 07:54:23   BASELINE\n1  20051369    2021/22  ...  2022-11-04 07:54:23   BASELINE\n2  56109980    2021/22  ...  2022-11-04 07:54:23   BASELINE\n\n[3 rows x 6 columns]\nINFO:root:preview predictions values addes:\n['2327342' '2021/22' 0.0482946 'LocalRunTest' '2022-11-04 07:54:23'\n 'BASELINE']\nINFO:data_system_utilities.snowflake.utils:stage_query: \n create or replace stage ltbpFY23LocalRunTest\nurl='azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/NOHYPEROPT/'\ncredentials=(azure_sas_token='**MASKED**')\nencryption=(type= 'NONE')\nfile_format = (type = parquet        )\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.query:Stage area LTBPFY23LOCALRUNTEST successfully created.\nINFO:root:adls snowflake stage query \n    select\n    $1:\"ECID\"::varchar as ECID\n, $1:\"SEASONYEAR\"::varchar as SEASONYEAR\n, $1:\"AGE\"::varchar as AGE\n, $1:\"AVGVISITPERSEASON\"::varchar as AVGVISITPERSEASON\n, $1:\"BOUGHTPASS\"::varchar as BOUGHTPASS\n, $1:\"DESTINATIONGEOAFINITYLABEL\"::varchar as DESTINATIONGEOAFINITYLABEL\n, $1:\"EVERCOREPASS\"::varchar as EVERCOREPASS\n, $1:\"EVERPASS\"::varchar as EVERPASS\n, $1:\"GENDERCODE\"::varchar as GENDERCODE\n, $1:\"GUESTBEHAVIOR\"::varchar as GUESTBEHAVIOR\n, $1:\"ISEPICMIXACTIVATED\"::varchar as ISEPICMIXACTIVATED\n, $1:\"MARKETINGZONE\"::varchar as MARKETINGZONE\n, $1:\"MOSTCOMMONTICKETCOMP\"::varchar as MOSTCOMMONTICKETCOMP\n, $1:\"MOSTSUBSEASONVISITED\"::varchar as MOSTSUBSEASONVISITED\n, $1:\"MOSTVISITEDREGION\"::varchar as MOSTVISITEDREGION\n, $1:\"MOSTVISITEDRESORT\"::varchar as MOSTVISITEDRESORT\n, $1:\"ONLYSINGLERESORTKEY\"::varchar as ONLYSINGLERESORTKEY\n, $1:\"PARTNERRESORTSCANNERFLAG\"::varchar as PARTNERRESORTSCANNERFLAG\n, $1:\"RESORTSVISITED\"::varchar as RESORTSVISITED\n, $1:\"SKIERABILITYLABEL\"::varchar as SKIERABILITYLABEL\n, $1:\"SUBSEASONSPERYEAR\"::varchar as SUBSEASONSPERYEAR\n, $1:\"TOTALSEASONSSCANNED\"::varchar as TOTALSEASONSSCANNED\n, $1:\"TOTALVISITS\"::varchar as TOTALVISITS\n, $1:\"VISITMOSTINPEAK\"::varchar as VISITMOSTINPEAK\n\n    from @ltbpFY23LocalRunTest/inference_data/\n    LIMIT 1000\n    \n\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Preview dataframe queried        ECID SEASONYEAR  AGE  ... TOTALSEASONSSCANNED TOTALVISITS VISITMOSTINPEAK\n0   5224121    2021/22   64  ...                   0           0               0\n1  65773479    2021/22   23  ...                   0           0               0\n2  57541763    2021/22  119  ...                   0           0               0\n3  49372383    2021/22   46  ...                   0           0               0\n4  58111328    2021/22    5  ...                   0           0               0\n\n[5 rows x 24 columns]\nINFO:root:Loading Sklearn Object to: ./models/train_xgb_basicLocalRunTestNOHYPEROPT.pkl\nINFO:data_system_utilities.azure.storage:Downloading projects/LTBP/FY23/experiments/NOHYPEROPT/modeling/train_xgb_basic/train_xgb_basicLocalRunTestNOHYPEROPT.pkl to ./models/train_xgb_basicLocalRunTestNOHYPEROPT.pkl\nINFO:data_system_utilities.azure.storage:Download complete\nINFO:root:Sklearn Object Loaded\nINFO:root:preview predictions being added:\n       ECID SEASONYEAR  ...         DATE_CREATED  EXPERIMENT\n0   5224121    2021/22  ...  2022-11-04 07:54:33  NOHYPEROPT\n1  65773479    2021/22  ...  2022-11-04 07:54:33  NOHYPEROPT\n2  57541763    2021/22  ...  2022-11-04 07:54:33  NOHYPEROPT\n\n[3 rows x 6 columns]\nINFO:root:preview predictions values addes:\n['5224121' '2021/22' 0.060644448 'LocalRunTest' '2022-11-04 07:54:33'\n 'NOHYPEROPT']\nINFO:root:preview predictions being added columns:\nIndex(['ECID', 'SEASONYEAR', 'PROBABILITY', 'CI_COMMIT_SHA', 'DATE_CREATED',\n       'EXPERIMENT'],\n      dtype='object')\nINFO:data_system_utilities.azure.storage:Uploading predictions_LocalRunTestNOHYPEROPT.csv, to Azure Storage projects/LTBP/FY23/LocalRunTest/NOHYPEROPT/predictions/train_xgb_basic/predictions_LocalRunTestNOHYPEROPT.csv\nINFO:data_system_utilities.azure.storage:Azure Upload Complete\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:Pushing Forecasted Season from ADLS to Snowflake\nINFO:data_system_utilities.snowflake.copyinto:\ncopy into MACHINELEARNINGOUTPUTS.LTBP.LTBP_PREDICTIONS_FY23\nfrom 'azure://vaildtscadls.blob.core.windows.net/vailadls/projects/LTBP/FY23/LocalRunTest/NOHYPEROPT/predictions/train_xgb_basic/predictions_LocalRunTestNOHYPEROPT.csv'\nfile_format = (type = csv     skip_header = 1)\ncredentials= (azure_sas_token = '?sv=2019-12-12&ss=bfqt&srt=sco&sp=rwdlacupx&se=2031-01-22T06:17:14Z&st=2021-01-21T22:17:14Z&spr=https&sig=kIHogByJjyVWyL6XupA0CBUB1iw12%2FeXWFQiOj5fB5c%3D')\npattern = '.*.csv';\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\nINFO:root:preview of queried table being added:\n       ECID SEASONYEAR  ...         DATE_CREATED  EXPERIMENT\n0   5224121    2021/22  ...  2022-11-04 07:54:33  NOHYPEROPT\n1  65773479    2021/22  ...  2022-11-04 07:54:33  NOHYPEROPT\n2  57541763    2021/22  ...  2022-11-04 07:54:33  NOHYPEROPT\n\n[3 rows x 6 columns]\nINFO:root:preview predictions values addes:\n['5224121' '2021/22' 0.060644448 'LocalRunTest' '2022-11-04 07:54:33'\n 'NOHYPEROPT']\n\n\n\nResults\n\nsf.run_sql_str('''SELECT * \nFROM MACHINELEARNINGOUTPUTS.LTBP.LTBP_PREDICTIONS_FY23\nORDER BY DATE_CREATED DESC\nLIMIT 5\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      ECID\n      SEASONYEAR\n      PROBABILITY\n      CI_COMMIT_SHA\n      DATE_CREATED\n      EXPERIMENT\n    \n  \n  \n    \n      0\n      49372383\n      2021/22\n      0.020070\n      LocalRunTest\n      2022-11-04 07:54:33\n      NOHYPEROPT\n    \n    \n      1\n      65773479\n      2021/22\n      0.028624\n      LocalRunTest\n      2022-11-04 07:54:33\n      NOHYPEROPT\n    \n    \n      2\n      5224121\n      2021/22\n      0.060644\n      LocalRunTest\n      2022-11-04 07:54:33\n      NOHYPEROPT\n    \n    \n      3\n      58111328\n      2021/22\n      0.028791\n      LocalRunTest\n      2022-11-04 07:54:33\n      NOHYPEROPT\n    \n    \n      4\n      57541763\n      2021/22\n      0.037379\n      LocalRunTest\n      2022-11-04 07:54:33\n      NOHYPEROPT\n    \n  \n\n\n\n\n\nsf.run_sql_str('''SELECT DISTINCT CI_COMMIT_SHA, DATE_CREATED, EXPERIMENT\nFROM MACHINELEARNINGOUTPUTS.LTBP.LTBP_PREDICTIONS_FY23\nORDER BY DATE_CREATED DESC\nLIMIT 5\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      CI_COMMIT_SHA\n      DATE_CREATED\n      EXPERIMENT\n    \n  \n  \n    \n      0\n      LocalRunTest\n      2022-11-04 07:54:33\n      NOHYPEROPT\n    \n    \n      1\n      LocalRunTest\n      2022-11-04 07:54:23\n      BASELINE\n    \n  \n\n\n\n\nIf this table populates you can think about how an post analysis experiment could work meaning you can do a prediction average ensemble between the models that are production level and weigh them depending on your confidence there is also an ensemble trainer that can be used, but isn’t covered here\n\nsf.run_sql_str('''SELECT ECID, COUNT(1) Total\nFROM MACHINELEARNINGOUTPUTS.LTBP.LTBP_PREDICTIONS_FY23\nGROUP BY ECID\nHAVING COUNT(1) > 2\nLIMIT 5\n''')\n\nINFO:data_system_utilities.snowflake.utils:connection to snowflake established...\nINFO:data_system_utilities.snowflake.query:executing query\nINFO:data_system_utilities.snowflake.query:data loaded from snowflake\nINFO:data_system_utilities.snowflake.query:connection to snowflake has been turned off\n\n\n\n\n\n\n  \n    \n      \n      ECID\n      TOTAL"
  }
]